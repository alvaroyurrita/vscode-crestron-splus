{
  "scopeName": "source.splus",
  "fileTypes": [
    "usp",
    "usl",
    "csp",
    "csl"
  ],
  "name": "Crestron",
  "patterns": [
    {
      "include": "#preprocessor"
    },
    {
      "include": "#script-top-level"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "script-top-level": {
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#expression-operator-expression"
        },
        {
          "include": "#assignment-expression"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "identifier": {
      "name": "variable.other.readwrite.cs",
      "match": "[\\_[:alpha:]][\\_\\#\\_\\$[:alnum:]]*"
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash.cs",
          "begin": "(^\\s+)?(\\/\\/).*$",
          "while": "^(\\s*)(\\/\\/).*$",
          "captures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.cs"
            },
            "2": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        },
        {
          "name": "comment.block.cs",
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        }
      ]
    },
    "punctuation-comma": {
      "match": ",",
      "name": "punctuation.separator.comma.usp"
    },
    "punctuation-semicolon": {
      "match": ";",
      "name": "punctuation.terminator.statement.usp"
    },
    "preprocessor": {
      "name": "meta.preprocessor.cs",
      "begin": "^\\s*(\\#)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.hash.cs"
        }
      },
      "end": "(?<=$)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#preprocessor-define-constant"
        },
        {
          "include": "#preprocessor-if-defined"
        },
        {
          "include": "#preprocessor-endif"
        },
        {
          "include": "#preprocessor-category"
        },
        {
          "include": "#preprocessor-library"
        }
      ]
    },
    "preprocessor-define-constant": {
      "begin": "(?ix)\\G  \\b(define_constant)\\b\\s*  #Directive\n  \\b([_[:alpha:]][\\#\\$\\_[:alnum:]]*)\\b\\s* #Constant Name\n",
      "end": "$",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.defineconstant.cs"
        },
        "2": {
          "name": "entity.name.variable.preprocessor.symbol.cs"
        }
      },
      "patterns": [
        {
          "match": "(\\G0[xX])([[:xdigit:]]{1,4})",
          "captures": {
            "1": {
              "name": "constant.numeric.other.prefix.hex.cs"
            },
            "2": {
              "name": "constant.numeric.hex.cs"
            }
          }
        },
        {
          "match": "(\\G[0-9]+)",
          "name": "constant.numeric.decimal.cs"
        },
        {
          "match": "(\\G\\'.\\')",
          "name": "constant.character.cs"
        },
        {
          "match": "(\\G\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-if-defined": {
      "begin": "(?ix)\\G  \\b(if_defined)\\b #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.ifdefined.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "\\b([_[:alpha:]][\\#\\$\\_[:alnum:]]*)\\b",
          "name": "entity.name.variable.preprocessor.symbol.cs"
        }
      ]
    },
    "preprocessor-endif": {
      "match": "(?ix)\\G  \\b(endif)\\b #Directive\n",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.endif.cs"
        }
      }
    },
    "preprocessor-category": {
      "begin": "(?ix)\\G  \\b(category)\\b #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.category.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "(\\G\\s*\\\"[0-9]*?\\\")",
          "name": "constant.numeric.category.cs"
        }
      ]
    },
    "preprocessor-library": {
      "begin": "(?ix)\\G  \\b((?:([a-z]*)_)?([a-z]*)_library)\\b #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.library.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "(\\G\\s*\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "expression-operator-expression": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.cs"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.cs"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "assignment-expression": {
      "begin": "\\=",
      "beginCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#assignment-operators"
            }
          ]
        }
      },
      "end": "(?=[,\\)\\];}])",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "assignment-operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.cs",
          "match": "\\="
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.operator.bitwise.shift.cs",
          "match": "(?i)<<|>>"
        },
        {
          "name": "keyword.operator.bitwise.rotate.cs",
          "match": "{{|}}"
        },
        {
          "name": "keyword.operator.comparison.cs",
          "match": "=|<>"
        },
        {
          "name": "keyword.operator.relational.cs",
          "match": "<=|>=|<|>|S<=|S>=|S<|S>"
        },
        {
          "name": "keyword.operator.logical.cs",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.cs",
          "match": "(?i)\\&|not|\\^|\\|"
        },
        {
          "name": "keyword.operator.arithmetic.cs",
          "match": "(?i)\\+|-(?!>)|\\*|\\/|S\\/|%|mod|umod"
        }
      ]
    }
  }
}