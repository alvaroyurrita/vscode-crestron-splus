{
  "scopeName": "source.splus",
  "fileTypes": [
    "usp",
    "usl",
    "csp",
    "csl"
  ],
  "name": "Crestron",
  "patterns": [
    {
      "include": "#preprocessor"
    },
    {
      "include": "#script-top-level"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "script-top-level": {
      "patterns": [
        {
          "include": "#statement"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#preprocessor"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#expression-operator-expression"
        },
        {
          "include": "#assignment-expression"
        },
        {
          "include": "#expression-operators"
        },
        {
          "include": "#identifier"
        }
      ]
    },
    "identifier": {
      "name": "variable.other.readwrite.cs",
      "match": "[\\_[:alpha:]][\\_\\#\\_\\$[:alnum:]]*"
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.double-slash.cs",
          "begin": "(^\\s+)?(\\/\\/).*$",
          "while": "^(\\s*)(\\/\\/).*$",
          "captures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.cs"
            },
            "2": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        },
        {
          "name": "comment.block.cs",
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.cs"
            }
          }
        },
        {
          "contentName": "comment.block.documentation.cs",
          "begin": "(?i)(?:(help_begin)|(begin_prop_full_description)|(begin_prop_notes))",
          "beginCaptures": {
            "1": {
              "name": "keyword.preprocessor.helpbegin.cs"
            },
            "2": {
              "name": "keyword.preprocessor.beginpropfulldescription.cs"
            },
            "3": {
              "name": "keyword.preprocessor.beginpropnotes.cs"
            }
          },
          "end": "(?i)(\\#)(?:(help_end)|(end_prop_full_description)|(end_prop_notes))$",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.hash.cs"
            },
            "2": {
              "name": "keyword.preprocessor.helpend.cs"
            },
            "3": {
              "name": "keyword.preprocessor.endpropfulldescription.cs"
            },
            "4": {
              "name": "keyword.preprocessor.endpropnotes.cs"
            }
          }
        }
      ]
    },
    "punctuation-comma": {
      "match": ",",
      "name": "punctuation.separator.comma.usp"
    },
    "punctuation-semicolon": {
      "match": ";",
      "name": "punctuation.terminator.statement.usp"
    },
    "preprocessor": {
      "name": "meta.preprocessor.cs",
      "begin": "^\\s*(\\#)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.hash.cs"
        }
      },
      "end": "(?<=$)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#preprocessor-define-constant"
        },
        {
          "include": "#preprocessor-if-ifnot-defined"
        },
        {
          "include": "#preprocessor-endif"
        },
        {
          "include": "#preprocessor-category"
        },
        {
          "include": "#preprocessor-library"
        },
        {
          "include": "#preprocessor-include-path"
        },
        {
          "include": "#preprocessor-symbol-name"
        },
        {
          "include": "#preprocessor-hint"
        },
        {
          "include": "#preprocessor-help"
        },
        {
          "include": "#preprocessor-default-nonvolatile-volatile"
        },
        {
          "include": "#preprocessor-analog-digital-expand"
        },
        {
          "include": "#preprocessor-output-shift"
        },
        {
          "include": "#preprocessor-max-internal-buffer-size"
        },
        {
          "include": "#preprocessor-single"
        },
        {
          "include": "#preprocessor-begin-parameter-properties"
        },
        {
          "include": "#preprocessor-end-parameter-properties"
        }
      ]
    },
    "preprocessor-define-constant": {
      "begin": "(?ix)\\G  \\b(define_constant)\\b\\s*  #Directive\n  \\b([_[:alpha:]][\\#\\$\\_[:alnum:]]*)\\b\\s* #Constant Name\n",
      "end": "(?=$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.defineconstant.cs"
        },
        "2": {
          "name": "entity.name.variable.preprocessor.symbol.cs"
        }
      },
      "patterns": [
        {
          "match": "(\\G0[xX])([[:xdigit:]]{1,4})",
          "captures": {
            "1": {
              "name": "constant.numeric.other.prefix.hex.cs"
            },
            "2": {
              "name": "constant.numeric.hex.cs"
            }
          }
        },
        {
          "match": "(\\G[0-9]+)",
          "name": "constant.numeric.decimal.cs"
        },
        {
          "match": "(\\G\\'.\\')",
          "name": "constant.character.cs"
        },
        {
          "match": "(\\G\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-if-ifnot-defined": {
      "begin": "(?ix)\\G  \\b(if_defined)|(if_not_defined)\\b #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.ifdefined.cs"
        },
        "2": {
          "name": "keyword.preprocessor.ifnotdefined.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "match": "\\b([_[:alpha:]][\\#\\$\\_[:alnum:]]*)\\b",
          "name": "entity.name.variable.preprocessor.symbol.cs"
        }
      ]
    },
    "preprocessor-endif": {
      "match": "(?ix)\\G  \\b(endif)\\b #Directive\n",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.endif.cs"
        }
      }
    },
    "preprocessor-category": {
      "begin": "(?ix)\\G  \\b(category)\\b\\s* #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.category.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\G\\\"[0-9]*?\\\"",
          "name": "constant.numeric.category.cs"
        }
      ]
    },
    "preprocessor-library": {
      "begin": "(?ix)\\G  \\b((?:(?:user_simplsharp|crestron_simplsharp|user|crestron)_)library)\\b\\s*\n",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "match": "(?i)((?:user_simplsharp).*)",
              "name": "keyword.preprocessor.usersimplsharplibrary.cs"
            },
            {
              "match": "(?i)((?:crestron_simplsharp).*)",
              "name": "keyword.preprocessor.crestronsimplsharplibrary.cs"
            },
            {
              "match": "(?i)((?:user).*)",
              "name": "keyword.preprocessor.userlibrary.cs"
            },
            {
              "match": "(?i)((?:crestron).*)",
              "name": "keyword.preprocessor.crestronlibrary.cs"
            }
          ]
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\G(\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-include-path": {
      "begin": "(?ix)\\G  \\b(includepath)\\b\\s* #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.includepath.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\G(\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-symbol-name": {
      "begin": "(?ix)\\G  \\b(symbol_name)\\b\\s* #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.symbolname.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\G(\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-hint": {
      "begin": "(?ix)\\G  \\b(hint)\\b\\s* #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.hint.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\G(\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-help": {
      "begin": "(?ix)\\G  \\b(help)\\b\\s* #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.help.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "match": "\\G(\\\".*?\\\")",
          "name": "string.quoted.double.cs"
        }
      ]
    },
    "preprocessor-default-nonvolatile-volatile": {
      "match": "(?ix)\\G  \\b(default_nonvolatile)|(default_volatile)\\b #Directive\n",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.defaultnonvolatile.cs"
        },
        "2": {
          "name": "keyword.preprocessor.defaultvolatile.cs"
        }
      }
    },
    "preprocessor-analog-digital-expand": {
      "begin": "(?ix)\\G  \\b(?:(analog_serial_expand)|(digital_expand))\\b\\s* #Directive\n",
      "end": "(?=$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.analogserialexpand.cs"
        },
        "2": {
          "name": "keyword.preprocessor.digitalexpand.cs"
        }
      },
      "patterns": [
        {
          "match": "(?ix)\\G  ([a-z]+)$\n",
          "name": "keyword.control.option.cs"
        }
      ]
    },
    "preprocessor-output-shift": {
      "begin": "(?ix)\\G  \\b(output_shift)\\b\\s* #Directive\n",
      "end": "(?=$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.outputshift.cs"
        }
      },
      "patterns": [
        {
          "match": "\\G[0-9]+",
          "name": "constant.numeric.decimal.cs"
        }
      ]
    },
    "preprocessor-max-internal-buffer-size": {
      "begin": "(?ix)\\G  \\b(max_internal_buffer_size)\\b\\s* #Directive\n",
      "end": "(?=$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.outputshift.cs"
        }
      },
      "patterns": [
        {
          "match": "\\G[0-9]+",
          "name": "constant.numeric.decimal.cs"
        }
      ]
    },
    "preprocessor-single": {
      "begin": "(?ix)\\G  (?:\\b\n    (?:\n      (print_to_trace)|\n      (enable_dynamic)|\n      (enable_stack_checking)|\n      (large_stack)|\n      (enable_trace)|\n      (encoding_ascii)|\n      (encoding_inherit_from_parent)|\n      (encoding_inherit_from_program)|\n      (encoding_utf16)\n    )\\b)\n    \\s* #Directive\n",
      "end": "(?=$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.printtotrace.cs"
        },
        "2": {
          "name": "keyword.preprocessor.enabledynamic.cs"
        },
        "3": {
          "name": "keyword.preprocessor.enablestackchecking.cs"
        },
        "4": {
          "name": "keyword.preprocessor.largestack.cs"
        },
        "5": {
          "name": "keyword.preprocessor.enabletrace.cs"
        },
        "6": {
          "name": "keyword.preprocessor.encodingascii.cs"
        },
        "7": {
          "name": "keyword.preprocessor.encodinginheritfromparent.cs"
        },
        "8": {
          "name": "keyword.preprocessor.encodinginheritfromprogram.cs"
        },
        "9": {
          "name": "keyword.preprocessor.encodingutf16.cs"
        }
      }
    },
    "preprocessor-begin-parameter-properties": {
      "begin": "(?ix)\\G  \\b(begin_parameter_properties)\\b #Directive\n",
      "beginCaptures": {
        "1": {
          "name": "keyword.preprocessor.beginparameterproperties.cs"
        }
      },
      "end": "(?=$)",
      "patterns": [
        {
          "include": "#identifier"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "preprocessor-end-parameter-properties": {
      "match": "(?ix)\\G  \\b(end_parameter_properties)\\b #directive\n",
      "captures": {
        "1": {
          "name": "keyword.preprocessor.endparameterproperties.cs"
        }
      }
    },
    "expression-operator-expression": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.cs"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.parenthesis.close.cs"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "assignment-expression": {
      "begin": "\\=",
      "beginCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#assignment-operators"
            }
          ]
        }
      },
      "end": "(?=[,\\)\\];}])",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "assignment-operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.cs",
          "match": "\\="
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.operator.bitwise.shift.cs",
          "match": "(?i)<<|>>"
        },
        {
          "name": "keyword.operator.bitwise.rotate.cs",
          "match": "{{|}}"
        },
        {
          "name": "keyword.operator.comparison.cs",
          "match": "=|<>"
        },
        {
          "name": "keyword.operator.relational.cs",
          "match": "<=|>=|<|>|S<=|S>=|S<|S>"
        },
        {
          "name": "keyword.operator.logical.cs",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.cs",
          "match": "(?i)\\&|not|\\^|\\|"
        },
        {
          "name": "keyword.operator.arithmetic.cs",
          "match": "(?i)\\+|-(?!>)|\\*|\\/|S\\/|%|mod|umod"
        }
      ]
    }
  }
}