---
scopeName: source.splus
fileTypes:
  - usp
  - usl
name: Crestron
patterns:
  - include: "#comment"
  # - include: "#preprocessor"
  - include: "#declarations"
  # - include: "#statements"
  # - include: "#expressions"
  # - include: "#punctuation"

repository:

#Comment
  comment:
    patterns:
      - include: "#comment-single-line"
      - include: "#comment-block"
  comment-single-line:
    name: comment.line.double-slash.usp
    begin: (^\s+)?(\/\/).*$
    while: ^(\s*)(\/\/).*$
    captures:
      "1":
        name: punctuation.whitespace.comment.leading.usp
      "2":
        name: punctuation.definition.comment.usp
  comment-block:
    name: comment.block.usp
    begin: \/\*
    end: \*\/
    captures:
      "0":
        name: punctuation.definition.comment.usp  

#preprocessor
  preprocessor:
    patterns:
      - include: "#preprocessor-parameter-properties"
      - include: "#preprocessor-block-help"
      - include: "#preprocessor-single-line"
  preprocessor-single-line:
    name: meta.preprocessor.usp
    begin: ^\s*(\#)
    beginCaptures:
      "1":
        name: punctuation.separator.hash.usp
    end: (?<=$)
    patterns:
      - include: "#comment"
      - include: "#preprocessor-define-constant"
      - include: "#preprocessor-if-ifnot-defined"
      - include: "#preprocessor-endif"
      - include: "#preprocessor-category"
      - include: "#preprocessor-library"
      - include: "#preprocessor-include-path"
      - include: "#preprocessor-symbol-name"
      - include: "#preprocessor-hint"
      - include: "#preprocessor-help"
      - include: "#preprocessor-default-nonvolatile-volatile"
      - include: "#preprocessor-analog-digital-expand"
      - include: "#preprocessor-output-shift"
      - include: "#preprocessor-max-internal-buffer-size"
      - include: "#preprocessor-single"
  preprocessor-define-constant:
    begin: |-
      (?ix)\G
        \b(define_constant)\b\s*  #Directive
        \b([_[:alpha:]][\#\$\_[:alnum:]]*)\b\s* #Constant Name
    end: (?=$)
    beginCaptures:
      "1":
        name: keyword.preprocessor.defineconstant.usp
      "2":
        name: entity.name.variable.preprocessor.symbol.usp
    patterns:
      - match: (\G0[xX])([[:xdigit:]]{1,4})
        captures:
          "1":
            name: constant.numeric.other.prefix.hex.usp
          "2":
            name: constant.numeric.hex.usp
      - match: (\G[0-9]+)
        name: constant.numeric.decimal.usp
      - match: (\G\'.\')
        name: constant.character.usp
      - match: (\G\".*?\")
        name: string.quoted.double.usp
  preprocessor-if-ifnot-defined:
    begin: |-
      (?ix)\G
        \b(?:(if_defined)|(if_not_defined))\b\s* #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.ifdefined.usp
      "2":
        name: keyword.preprocessor.ifnotdefined.usp
    end: (?=$)
    patterns:
      - match: \G([_[:alpha:]][\#\$\_[:alnum:]]*)
        name: entity.name.variable.preprocessor.symbol.usp
  preprocessor-endif:
    match: |-
      (?ix)\G
        \b(endif)\b #Directive
    captures:
      "1":
        name: keyword.preprocessor.endif.usp
  preprocessor-category:
    begin: |-
      (?ix)\G
        \b(category)\b\s* #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.category.usp
    end: (?=$)
    patterns:
      - match: \G\"[0-9]*?\"
        name: constant.numeric.category.usp
  preprocessor-library:
    begin: |-
      (?ix)\G
        \b((?:(?:user_simplsharp|crestron_simplsharp|user|crestron)_)library)\b\s*
    beginCaptures:
      "1":
        patterns:
          - match: (?i)((?:user_simplsharp).*)
            name: keyword.preprocessor.usersimplsharplibrary.usp
          - match: (?i)((?:crestron_simplsharp).*)
            name: keyword.preprocessor.crestronsimplsharplibrary.usp
          - match: (?i)((?:user).*)
            name: keyword.preprocessor.userlibrary.usp
          - match: (?i)((?:crestron).*)
            name: keyword.preprocessor.crestronlibrary.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-include-path:
    begin: |-
      (?ix)\G
        \b(includepath)\b\s* #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.includepath.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-symbol-name:
    begin: |-
      (?ix)\G
        \b(symbol_name)\b\s* #Directive
    beginCaptures:
      '1':
        name: keyword.preprocessor.symbolname.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-hint:
    begin: |-
      (?ix)\G
        \b(hint)\b\s* #Directive
    beginCaptures:
      '1':
        name: keyword.preprocessor.hint.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-help:
    begin: |-
      (?ix)\G
        \b(help)\b\s* #Directive
    beginCaptures:
      '1':
        name: keyword.preprocessor.help.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-default-nonvolatile-volatile:
    match: |-
      (?ix)\G
        \b(default_nonvolatile)|(default_volatile)\b #Directive
    captures:
      '1':
        name: keyword.preprocessor.defaultnonvolatile.usp
      '2':
        name: keyword.preprocessor.defaultvolatile.usp
  preprocessor-analog-digital-expand:
    begin: |-
      (?ix)\G
        \b(?:(analog_serial_expand)|(digital_expand))\b\s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.analogserialexpand.usp
      '2':
        name: keyword.preprocessor.digitalexpand.usp
    patterns:
      - match: |-
          (?ix)\G
            ([a-z]+)$
        name: keyword.control.option.usp
  preprocessor-output-shift:
    begin: |-
      (?ix)\G
        \b(output_shift)\b\s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.outputshift.usp
    patterns:
      - match: \G[0-9]+
        name: constant.numeric.decimal.usp
  preprocessor-max-internal-buffer-size:
    begin: |-
      (?ix)\G
        \b(max_internal_buffer_size)\b\s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.outputshift.usp
    patterns:
      - match: \G[0-9]+
        name: constant.numeric.decimal.usp
  preprocessor-single:
    begin: |-
      (?ix)\G
        (?:\b
          (?:
            (print_to_trace)|
            (enable_dynamic)|
            (enable_stack_checking)|
            (large_stack)|
            (enable_trace)|
            (encoding_ascii)|
            (encoding_inherit_from_parent)|
            (encoding_inherit_from_program)|
            (encoding_utf16)|
            (default_nonvolatile)|
            (default_volatile)|
            (endif)|
            (if_series2)|
            (if_series3)|
            (if_series4)
          )\b)
          \s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.printtotrace.usp
      '2':
        name: keyword.preprocessor.enabledynamic.usp
      '3':
        name: keyword.preprocessor.enablestackchecking.usp
      '4':
        name: keyword.preprocessor.largestack.usp
      '5':
        name: keyword.preprocessor.enabletrace.usp
      '6':
        name: keyword.preprocessor.encodingascii.usp
      '7':
        name: keyword.preprocessor.encodinginheritfromparent.usp
      '8':
        name: keyword.preprocessor.encodinginheritfromprogram.usp
      '9':
        name: keyword.preprocessor.encodingutf16.usp
      '10':
        name: keyword.preprocessor.defaultnonvolatile.usp
      '11':
        name: keyword.preprocessor.defaultvolatile.usp
      '12':
        name: keyword.preprocessor.endif.usp
      '13':
        name: keyword.preprocessor.ifseries2.usp
      '14':
        name: keyword.preprocessor.ifseries3.usp
      '15':
        name: keyword.preprocessor.ifseries4.usp
  preprocessor-parameter-properties:
    name: meta.preprocessor.properties.usp
    begin: |-
      (?ix)
        (\#)(begin_parameter_properties)
        (
          [\_\#\_\$\,[:alnum:]\s]*
        )? #Parameter Properties Directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.beginparameterproperties.usp
      "3":
        patterns:
          - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
            name: entity.name.type
          - include: "#punctuation-comma"
    end: |-
      (?ix)
        (\#)(END_PARAMETER_PROPERTIES)
    endCaptures :
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.endparameterproperties.usp
    patterns:
      - include: "#preprocessor-parameter-properties-valid-unit"
      - include: "#preprocessor-parameter-properties-default-unit"
      - include: "#preprocessor-parameter-properties-default-value"
      - include: "#preprocessor-parameter-properties-list"
      - include: "#preprocessor-parameter-properties-bounds"
      - include: "#preprocessor-parameter-properties-short-description"
      - include: "#preprocessor-properties-block-description-notes"
      - include: "#comment"
  preprocessor-parameter-properties-valid-unit:
    begin: |-
        (?ix)
          (\#)\b(propValidUnits)\b #directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.propvalidunits.usp        
    end: (;)
    endCaptures:
      "1":
        name: punctuation.terminator.parameteryproperty.usp
    patterns:
      - include: "#punctuation-assignment"
      - include: "#punctuation-pipe"
      - include: "#preprocessor-parameter-units"
  preprocessor-parameter-properties-default-unit:
    begin: |-
        (?ix)
          (\#)\b(propDefaultUnits)\b #directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.propdefaultunits.usp
    end: (;)
    endCaptures:
      "1":
        name: punctuation.terminator.parameteryproperty.usp
    patterns:
      - include: "#punctuation-assignment"
      - include: "#preprocessor-parameter-units"
  preprocessor-parameter-properties-default-value:
    begin: |-
        (?ix)
          (\#)\b(propDefaultValue)\b #directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.propdefaultunits.usp
    end: (;)
    endCaptures:
      "1":
        name: punctuation.terminator.parameteryproperty.usp
    patterns:
      - include: "#literals"
  preprocessor-parameter-properties-list:
    begin: |-
        (?ix)
          (\#)\b(propList)\b #directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.proplist.usp
    end: (;)
    endCaptures:
      "1":
        name: punctuation.terminator.parameteryproperty.usp
    patterns:
      - include: "#preprocessor-property-list-pair"
      - include: "#punctuation-comma"
  preprocessor-parameter-properties-bounds:
    begin: |-
        (?ix)
          (\#)\b(propBounds)\b #directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.propBounds.usp        
    end: (;)
    endCaptures:
      "1":
        name: punctuation.terminator.parameteryproperty.usp
    patterns:
      - include: "#numeric-literal"
      - include: "#punctuation-comma"
  preprocessor-parameter-properties-short-description:
    begin: |-
        (?ix)
          (\#)\b(propShortDescription)\b #directive
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.propShortDescription.usp        
    end: (;)
    endCaptures:
      "1":
        name: punctuation.terminator.parameteryproperty.usp
    patterns:
      - include: "#string-literal"
  preprocessor-block-help:
    name: meta.preprocessor.properties.help.usp
    contentName: comment.block.documentation.usp
    begin: (?i)(\#)(help_begin)
    beginCaptures:
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.helpbegin.usp
    end: (?i)(\#)(help_end)
    endCaptures:
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.helpend.usp
    patterns:
      - include: "#comment"
  preprocessor-properties-block-description-notes:
    name: meta.preprocessor.properties.description.usp
    contentName: comment.block.documentation.usp
    begin: (?i)(\#)(?:(begin_prop_full_description)|(begin_prop_notes))
    beginCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.beginpropfulldescription.usp
      "3":
        name: keyword.preprocessor.beginpropnotes.usp
    end: (?i)(\#)(?:(end_prop_full_description)|(end_prop_notes))$
    endCaptures:
      "0":
        name: meta.preprocessor.usp
      "1":
        name: punctuation.separator.hash.usp
      "2":
        name: keyword.preprocessor.endpropfulldescription.usp
      "3":
        name: keyword.preprocessor.endpropnotes.usp        
  preprocessor-parameter-units:
    patterns:
      - match: |-
          (?ix)
            \b(unitString|unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks)\b #directive
        name: keyword.preprocessor.$1.
  preprocessor-property-list-pair:
    patterns:
      - match: (\{)([^}]*)(\})
        captures:
          "1":
            name: punctuation.curlybrace.open.usp
          "2":
            patterns:
            - match: (.*)\s?(,)\s?(.*)
              captures:
                "1":
                  patterns:
                    - include: "#literals"
                "2":
                  name: punctuation.comma.usp
                "3":
                  patterns:
                    - include: "#string-literal"
          "3":
            name: punctuation.curlybrace.close.usp


#declarations
  declarations:
    patterns:
      - include: "#input-declaration"
      - include: "#output-declaration"
      - include: "#parameter-declaration"
      - include: "#structure-declaration"
      - include: "#function-declaration"
      - include: "#event-declaration"
      - include: "#callback-declaration"
      - include: "#namespace-declaration"
      - include: "#variable-declaration"
  input-declaration:
    name: meta.declaration.input.usp
    begin: |-
      (?ix)
        (?=(?:digital_input|analog_input|buffer_input|string_input)) #start pattern at the beginning of the input keyword without grabbing any characters
    end: |-
        (?ix)
          (;)|(?=\{)   #stop pattern before the closing curly brace or at semicolon
    endCaptures:
      "1":
        name: punctuation.terminator.input.usp
    patterns:
      - match: (?i)\b(digital_input|analog_input|buffer_input|string_input)\b
        name: keyword.declaration.input.usp
      - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
        name: entity.name.variable.input.usp
      - include: "#declaration-skip"
      - include: "#comment"
      - include: "#punctuation-comma"
      - include: "#type-array-suffix"
  output-declaration:
    name: meta.declaration.output.usp
    begin: |-
      (?ix)
        (?=(?:digital_output|analog_output|buffer_output|string_output)) #start pattern at the beginning of the input keyword without grabbing any characters
    end: |-
        (?ix)
          (;)|(?=\{)   #stop pattern before the closing curly brace or at semicolon
    endCaptures:
      "1":
        name: punctuation.terminator.output.usp
    patterns:
      - match: (?i)\b(digital_output|analog_output|buffer_output|string_output)\b
        name: keyword.declaration.output.usp
      - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
        name: entity.name.variable.output.usp
      - include: "#declaration-skip"
      - include: "#comment"
      - include: "#punctuation-comma"
      - include: "#type-array-suffix"
  parameter-declaration:
    name: meta.declaration.parameter.usp
    begin: |-
      (?ix)
        (?=(?:integer_parameter|string_parameter|long_integer_parameter|signed_integer_parameter|signed_long_integer_parameter)) #start pattern at the beginning of the input keyword without grabbing any characters
    end: |-
        (?ix)
          (;)|(?=\{)   #stop pattern before the closing curly brace or at semicolon
    endCaptures:
      "1":
        name: punctuation.terminator.parameter.usp
    patterns:
      - match: (?i)\b(integer_parameter|string_parameter|long_integer_parameter|signed_integer_parameter|signed_long_integer_parameter)\b
        name: keyword.declaration.parameter.usp
      - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
        name: entity.name.variable.parameter.usp
      - include: "#declaration-skip"
      - include: "#comment"
      - include: "#punctuation-comma"
      - include: "#type-array-suffix"
  variable-declaration:
    begin: |-
      (?x)
        (?=
          ^   #start pattern at the beginning of a line
          \s* #ignore leading spaces
          (?:
            (?:[\_[:alpha:]][\_\#\_\$[:alnum:]]*)\s   #grab identifier
          )
          (?=[\_[:alpha:]])  #only when followed by the beginning of another identifier
        )          #without grabbing any characters
    end: |-
      (?x)
        (?<=;)|    #stop pattern after the semicolon or
        (?=[{\(]) #before curly bracket or parenthesis without grabbing any characters
    patterns:
      - begin: |-
          (?ix)
            (?:\s*)
            (dynamic|volatile|nonvolatile|ascii|utf16|inherit)?\s*  #Possibly grab modifier
            (?:
              (integer|string|long_integer|signed_integer|signed_long_integer|simplsharpstring|delegateproperty)| #grab the variable type or
              (cevent|cmutex)| #or built in class
              ([_[:alpha:]][\#\$\_[:alnum:]]*)\s* #grab the variable name
            )
        beginCaptures:
          "1":
            name: keyword.modifier.variable.usp
          '2':
            name: keyword.declaration.variable.usp
          '3':
            name: keyword.support.class.usp
          '4':
            name: entity.name.type.usp
        end: |-
          (?ix)
            (\;)  #stop pattern before the closing curly brace or before semicolon without grabbing any characters
        endCaptures:
          "1":
            name: punctuation.terminator.variable.usp
        name: meta.declaration.variable.usp
        patterns:
          - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
            name: entity.name.variable.usp
          - include: "#type-array-suffix"
          - include: "#comment"
          - include: "#punctuation-comma"
  structure-declaration:
    begin: |-
        (?ix)
          (?=\bstructure\b) #start pattern at the beginning of the word structure without grabbing any characters
    end: |-
        (?ix)
          (?<=};)   #stop pattern after the closing curly brace semicolon pair without grabbing any characters
    patterns:
      - begin: |-
            (?ix)
              \b(structure)\b\s+
              ([_[:alpha:]][\#\$\_[:alnum:]]*)
        beginCaptures:
          '1':
            name: keyword.declaration.structure.usp
          '2':
            name: entity.name.type.structure.usp
        end: |-
            (?ix)
              (?=\{)|(?=;) #stop pattern after the opening curly brace or before semicolon without grabbing any characters
        name: meta.declaration.structure.usp
        patterns:
        - include: "#comment"
      - begin: (\{)
        beginCaptures:
          '1':
            name: punctuation.curlybrace.open.usp
        end: (\})\s*(;)
        endCaptures:
          '1':
            name: punctuation.curlybrace.close.usp
          '2':
            name: punctuation.terminator.structure.usp
        name: meta.structure.contents
        patterns:
        - include: "#structure-members"
        - include: "#preprocessor"
        - include: "#comment"
  function-declaration:
    begin: |-
        (?ix)
          (?=(?:function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|simplsharpstring)) #start pattern at the beginning of the function keyword without grabbing any characters
    end: |-
        (?ix)
          (?<=})   #stop pattern after the closing curly brace without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            (function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|simplsharpstring)\b\s+
            ([_[:alpha:]][\#\$\_[:alnum:]]*)
      beginCaptures:
        '1':
          name: keyword.declaration.function.usp
        '2':
          name: entity.name.variable.function.usp
      end: |-
          (?ix)
            (?=\{) #stop pattern after the opening curly brace without grabbing any characters
      name: meta.declaration.function.usp
      patterns:
      - include: "#parenthesized-parameter-list"
    - begin: ({)
      beginCaptures:
        '1':
          name: punctuation.curlybrace.open.usp
      end: (})
      endCaptures:
        '1':
          name: punctuation.curlybrace.close.usp
      name: meta.function.contents
      patterns:
      - include: "#variable-declaration"
      - include: "#preprocessor"
      - include: "#statements"
      - include: "#comment"
  event-declaration:
    begin: |-
        (?ix)
          (?=
            (\bthreadsafe\b\s+)? #Possibly grab threadsafe
            (?:push|event|change|release|socketconnect|socketdisconnect|socketreceive|socketstatus|eventhandler)
          ) #start pattern at the beginning of the function keyword without grabbing any characters
    end: |-
        (?ix)
          (?<=})   #stop pattern after the closing curly brace without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            (\bthreadsafe\b\s+)?
            (push|event|change|release|socketconnect|socketdisconnect|socketreceive|socketstatus|eventhandler)\b\s+
      beginCaptures:
        '1':
          name: keyword.modifier.event.usp
        '2':
          name: keyword.declaration.event.usp
        '3':
          name: entity.name.variable.event.usp
      end: |-
          (?ix)
            (?=\{) #stop pattern after the opening curly brace without grabbing any characters
      name: meta.declaration.event.usp
      patterns:
      - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
        name: entity.name.variable.event.usp
      - include: "#punctuation-comma"
      - include: "#comment"
      - include: "#parenthesized-parameter-list"
    - begin: (\{)
      beginCaptures:
        '1':
          name: punctuation.curlybrace.open.usp
      end: (\})
      endCaptures:
        '1':
          name: punctuation.curlybrace.close.usp
      name: meta.event.contents
      patterns:
      # - include: "#variable-declaration"
      - match: (?i)\bTerminateEvent\b
        name: keyword.control.event.terminate.usp
      - include: "#statements"
      - include: "statement"
      - include: "#preprocessor"
      - include: "#comment"

  callback-declaration:
    begin: |-
        (?ix)
          (?=
            (\bcallback\b\s+)? #test for callback
            (?:function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|simplsharpstring)
          ) #start pattern at the beginning of the callback function keyword without grabbing any characters
    end: |-
        (?ix)
          (?<=})   #stop pattern after the closing curly brace without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            (\bcallback\b\s+)? #grab the callback keyword
            (function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|simplsharpstring)\b\s+
            ([_[:alpha:]][\#\$\_[:alnum:]]*)
      beginCaptures:
        '1':
          name: keyword.declaration.callback.usp
        '2':
          name: keyword.declaration.function.usp
        '3':
          name: entity.name.variable.function.usp
      end: |-
          (?ix)
            (?=\{) #stop pattern after the opening curly brace without grabbing any characters
      name: meta.declaration.function.usp
      patterns:
      - include: "#comment"
      - include: "#parenthesized-parameter-list"
    - begin: (\{)
      beginCaptures:
        '1':
          name: punctuation.curlybrace.open.usp
      end: (\})
      endCaptures:
        '1':
          name: punctuation.curlybrace.close.usp
      name: meta.callback.contents
      patterns:
      - include: "#statements"
      - include: "#variable-declaration"
      - include: "statement"
      - include: "#preprocessor"
      - include: "#comment"


  namespace-declaration:
    begin: |-
        (?ix)
          (?=\bnamespace\b) #start pattern at the beginning of the word structure without grabbing any characters
    end: |-
        (?ix)
          (?<=\})   #stop pattern after the closing curly brace without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            \b(namespace)\b\s+
            ([_[:alpha:]][\#\$\_[:alnum:]]*)
      beginCaptures:
        '1':
          name: keyword.declaration.namespace.usp
        '2':
          name: entity.name.type.namespace.usp
      end: |-
          (?ix)
            (?=\{) #stop pattern before the opening curly brace without grabbing any characters
      name: meta.declaration.namespace.usp
      patterns:
      - include: "#comment"
    - begin: (\{)
      beginCaptures:
        '1':
          name: punctuation.curlybrace.open.usp
      end: (\})(?!;)
      endCaptures:
        '1':
          name: punctuation.curlybrace.close.usp
      name: meta.namespace.contents
      patterns:
      - include: "#class-declaration"
      - include: "#comment"
  class-declaration:
    begin: |-
        (?ix)
          (?=
            (\bstatic\b\s+)?
            \bclass\b
          ) #start pattern at the beginning of the word (static)? class  without grabbing any characters
    end: |-
        (?ix)
          (?<=};)   #stop pattern after the closing curly brace semicolon pair without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            (?:\b(static)\b\s+)?               #possibly grab static
            \b(class)\b\s+                    #grab the word structure
            ([_[:alpha:]][\#\$\_[:alnum:]]*)  #grab the structure name
      beginCaptures:
        "1":
          name: keyword.modifier.class.usp
        '2':
          name: keyword.declaration.class.usp
        '3':
          name: entity.name.type.class.usp
      end: |-
          (?ix)
            (?=\{) #stop pattern before the opening curly brace or before semicolon without grabbing any characters
      patterns:
      - include: "#comment"
      name: meta.declaration.class.usp
    - begin: (\{)
      beginCaptures:
        '1':
          name: punctuation.curlybrace.open.usp
      end: (\})(;)
      endCaptures:
        '1':
          name: punctuation.curlybrace.close.usp
        '2':
          name: punctuation.terminator.class.usp
      name: meta.class.contents
      patterns:
      - include: "#class-delegate-declaration"
      - include: "#class-eventhandler-declaration"
      - include: "#class-function-declaration"
      - include: "#variable-declaration"
      - include: "#comment"
  class-delegate-declaration:
    name: meta.declaration.class.delegate.usp
    begin: |-
        (?ix)
          (?=
            (\bstatic\b\s+)?
            \bdelegate\bs*
          ) #start pattern at the beginning of the delegate keyword without grabbing any characters
    end: |-
        (?ix)
          (?<=\;)   #stop pattern before semicolon without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            (?:\b(static)\b\s+)?              #possibly grab static
            \b(delegate)\b\s+                 #grab the word delegate
            \b(function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|SIMPLSHARPSTRING_FUNCTION)\b\s+ #grab delegate type
            ([_[:alpha:]][\#\$\_[:alnum:]]*)   #grab the delegate name
      beginCaptures:
        '1':
          name: keyword.modifier.delegate.usp
        '2':
          name: keyword.declaration.delegate.usp
        '3':
          name: keyword.declaration.function.usp
        '4':
          name: entity.name.variable.delegate.usp
      end: (;)
      endCaptures:
        '1':
          name: punctuation.terminator.delegate.usp
      patterns:
      - include: "#comment"
      - include: "#parenthesized-parameter-list"
  class-eventhandler-declaration:
    name: meta.declaration.class.eventhandler.usp
    begin: |-
        (?ix)
          (?=
            \beventhandler\b
          ) #start pattern at the beginning of the eventhandler keyword without grabbing any characters
    end: |-
        (?ix)
          (?<=\;)   #stop pattern after semicolon without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            \b(eventhandler)\b\s+              #grab the word eventhandler
            ([_[:alpha:]][\#\$\_[:alnum:]]*)   #grab the delegate name
      beginCaptures:
        '1':
          name: keyword.modifier.eventhandler.usp
        '2':
          name: entity.name.variable.eventhandler.usp
      end: (;)
      endCaptures:
        '1':
          name: punctuation.terminator.eventhandler.usp
      patterns:
      - include: "#comment"
      - include: "#parenthesized-parameter-list"
  class-function-declaration:
    name: meta.declaration.class.function.usp
    begin: |-
        (?ix)
          (?=(?:function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|SIMPLSHARPSTRING_FUNCTION)) #start pattern at the beginning of the function keyword without grabbing any characters
    end: |-
        (?ix)
          (?<=;)   #stop pattern after the closing curly brace or before semicolon without grabbing any characters
    patterns:
    - begin: |-
          (?ix)
            (function|integer_function|string_function|long_integer_function|signed_integer_function|signed_long_integer_function|SIMPLSHARPSTRING_FUNCTION)\b\s+
            ([_[:alpha:]][\#\$\_[:alnum:]]*)
      beginCaptures:
        '1':
          name: keyword.declaration.function.usp
        '2':
          name: entity.name.variable.function.usp
      end: (;)
      endCaptures:
        '1':
          name: punctuation.terminator.function.usp patterns
      patterns:
      - include: "#preprocessor"
      - include: "#comment"
      - include: "#parenthesized-parameter-list"


  structure-members:
    patterns:
    - include: "#variable-declaration"
  parenthesized-parameter-list:
    name: meta.parameters
    begin: (\()
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.usp
    end: (\))
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.usp
    patterns:
    - include: "#comment"
    - include: "#parameter"
    - include: "#punctuation-comma"
  parameter:
    begin: |-
      (?ix)
          \s*(ByVal|ByRef|ReadOnlyByRef)?\s*  #Possibly grab modifier
          (?:
            (integer|string|long_integer|signed_integer|signed_long_integer|SIMPLSHARPSTRING|eventargs)| #grab the variable type or
            ([_[:alpha:]][\#\$\_[:alnum:]]*) #grab the type
          )
    beginCaptures:
      "1":
        name: keyword.modifier.parameter.usp
      '2':
        name: keyword.declaration.parameter.usp
      '3':
        name: entity.name.type.usp
    end: |-
      (?ix)
        (?=[\,\)])  #stop pattern before theres a comma or closing parenthesis without grabbing any characters
    patterns:
      - match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
        name: entity.name.variable.usp
      - include: "#type-array-suffix"

  type-array-suffix:
    begin: "\\["
    beginCaptures:
      '0':
        name: punctuation.squarebracket.open.usp
    end: "\\]"
    endCaptures:
      '0':
        name: punctuation.squarebracket.close.usp
    patterns:
    - include: "#numeric-literal"
    - include: "#punctuation-comma"




# statements
  statements:
    patterns:
      - include: "#preprocessor"
      - include: "#comment"
      # - include: "#branching-and-decision"
      - include: "#expressions"
      # - include: "#looping"
      # - include: "#local-function-declaration"
      # - include: "#void-invocation"
      # - include: "#branching-and-decision"
      # - include: "#flow-control"
      # - include: "#exception-handling"

  branching-and-decision:
    patterns:
      - include: "#while-statements"
      # - include: "#do-statements"
      # - include: "#for-statements"
  while-statements:
    begin: |-
        (?ix)
          \b(while)\b\s*(?=\() #Keyword
    beginCaptures:
      "1":
        name: keyword.control.loop.while.usp
    end: (?<=\})
    patterns:
      - begin: \(
        beginCaptures:
          "0":
            name: punctuation.definition.parameters.begin.usp
        end: \)
        endCaptures:
          "0":
            name: punctuation.definition.parameters.end.usp
        patterns:
          - include: "#expression"
      - include: "#statements"





#Expressions
  expressions:
    patterns:
      - include: "#preprocessor"
      # - include: "#comment"
      # - include: "#type-builtin"
      # - include: "#switch-statement-or-expression"
      # - include: "#assignment-expression"
      # - include: "#expression-operators"
      # - include: "#variable-declaration"
      - include: "#invocation-expression"
      # - include: "#element-access-expression"
      - include: "#literals"
      # - include: "#parenthesized-expression"
      # - include: "#identifier"
      # - include: "#built-in-variables"
      # - include: "#built-in-constants"


  invocation-expression:
    begin: |-
      (?xi)
        (\.)?\s*  # possibly grab dot from a SIMPL# type
        \b([\_[:alpha:]][\_\#\_\$[:alnum:]]*)\b\s* #grab the function name  
        (?=\() #stop pattern before the opening parenthesis without grabbing any characters
    beginCaptures:
      "1":
        name: punctuation.accessor.usp
      "2":
        patterns:
          - include: "#builtin-functions"
          - include: "#built-in-void-functions"
          - match: (?xi)[\_[:alpha:]][\_\#\_\$[:alnum:]]*
            name: entity.name.function.usp
    end: |-
      (?xi)
        (?<=\)) #stop pattern after the closing parenthesis without grabbing any characters
    patterns:
      - include: "#argument-list"
  builtin-functions:
    patterns:
      - include: "#functions-data-conversion"
      - include: "#functions-random-number"
      - include: "#functions-string-parsing"
      - include: "#functions-mathematical"
      - include: "#functions-bit-and-byte"
      - include: "#functions-file"
      - include: "#functions-time-and-date"
      - include: "#functions-system-interfacing"
      - include: "#functions-direct-socket-access"
      - include: "#functions-email"
      - include: "#functions-ramping"
      - include: "#functions-encoding"
      - include: "#functions-array-operations"
      - include: "#functions-exception-handling"
  functions-data-conversion:
    match: (?i)\b(Atoi|Atosi|Atol|Atosl|Chr|HexToI|HexToL|HexToSI|HexToSL|Itoa|Itohex|Ltoa|Ltohex)\b
    name: keyword.support.function.usp
  functions-random-number:
    match: (?i)\b(Random|Rnd)\b
    name: keyword.support.function.usp
  functions-string-parsing:
    match: |-
      (?ix)
        \b(CompareStrings|CompareStringsNoCase|Find|
        FindNoCase|Gather|GatherByLength|GatherAsync|GatherAsyncByLength|GatherByLengthWithDest|ReArmGatherAsync|RemoveGatherAsync|
        GetC|Left|Len|Lower|Upper|Mid|Remove|RemoveByLength|ResizeString|ReverseFind|ReverseFindNoCase|Right|SetString)\b
    name: keyword.support.function.usp
  functions-mathematical:
    match: (?i)\b(abs|max|min|muldiv|smax|smin)\b
    name: keyword.support.function.usp
  functions-bit-and-byte:
    match: (?i)\b(Bit|Byte|High|HighWord|Low|LowWord|LowerChar|RotateLeft|RotateLeftLong|RotateRight|RotateRightLong|SetByte|UpperChar)\b
    name: keyword.support.function.usp
  functions-file:
    match: |-
      (?ix)
        \b(FileBOF|FileClose|FileDelete|FileDeleteShared|FileEOF|FileLength|CheckForDisk|GetCurrentDirectory|
        FileOpen|FileOpenShared|FileRead|FileSeek|FileWrite|FindClose|FindFirst|FindFirstShared|FindNext|
        IsDirectory|IsHidden|IsReadOnly|IsSystem|IsVolume|MakeDirectory|MakeDirectoryShared|ReadInteger|
        ReadIntegerArray|ReadLongInteger|ReadLongIntegerArray|ReadSignedInteger|ReadSignedIntegerArray|
        ReadSignedLongInteger|ReadSignedLongIntegerArray|ReadString|ReadStringArray|CheckForNVRAMDisk|
        RemoveDirectory|RemoveDirectoryShared|SetCurrentDirectory|StartFileOperations|EndFileOperations|WaitForNewDisk|
        WriteInteger|WriteIntegerArray|WriteLongInteger|WriteLongIntegerArray|WriteSignedInteger|
        WriteSignedIntegerArray|WriteSignedLongInteger|WriteSignedLongIntegerArray|WriteString|WriteStringArray)\b
    name: keyword.support.function.usp
  functions-time-and-date:
    match: |-
      (?ix)
        \b(Date|Day|FileDate|FileDay|FileGetDateNum|FileGetDayOfWeekNum|FileGetHourNum|
        FileGetMinutesNum|FileGetMonthNum|FileGetSecondsNum|FileGetYearNum|FileMonth|FileTime|GetDateNum|
        GetDayOfWeekNum|GetDST|GetGMTOffset|GetHourNum|GetHSeconds|GetMinutesNum|GetMonthNum|GetSecondsNum|
        GetTicks|GetYearNum|month|SetGMTOffset|Time)\b
    name: keyword.support.function.usp
  functions-direct-socket-access:
    match: (?ix)
      \b(SocketConnectClient|SocketDisconnectClient|
      SocketGetAddressAsRequested|SocketGetPortNumber|SocketGetRemoteIPAddress|SocketGetSenderIPAddress|
      SocketGetStatus|SocketIsBroadcast|SocketIsMulticast|SocketSend|SocketServerStartListen|
      SocketServerStopListen|SocketUDP_Disable|SocketUDP_Enable)\b
    name: keyword.support.function.usp
  functions-email:
    match: (?i)\b(SendMail|SendMailAdvance|SendMailWithAttachments)\b
    name: keyword.support.function.usp
  functions-ramping:
    match: |-
      (?ix)
        \b(CompareRampsByAttribute|CompareRampsByID|CreateRamp|GetRampInfo|
        IsRamping|RAMP_INFO|StopRamp)\b
    name: keyword.support.function.usp
  functions-encoding:
    match: (?i)\b(GetEncoding|SetEncoding|ToAscii|ToUtf16)\b
    name: keyword.support.function.usp
  functions-system-interfacing:
    match: |-
      (?ix)
        \b(GetSlot|GetCresnet|GetCIP|GetSymbolInstanceName|GetSymbolReferenceName|MakeProgramFilename|GetModelNumber|GetSeries|
        IsSignalDefined)\b
    name: keyword.support.function.usp
  functions-array-operations:
    match: |-
      (?ix)
        \b(GetLastModifiedArrayIndex|GetNumArrayCols|GetNumArrayRows|GetNumStructureArrayCols|
        ResizeArray|ResizeStructureArray)\b
    name: keyword.support.function.usp
  functions-exception-handling:
    match: (?i)\b(GetExceptionCode|GetExceptionMessage)\b
    name: keyword.support.function.usp

  built-in-void-functions:
    patterns:
      - include: "#void-functions-random-number"
      - include: "#void-functions-string-parsing"
      - include: "#void-functions-file"
      - include: "#void-functions-system-control"
      - include: "#void-functions-time-and-date"
      - include: "#void-functions-system-interfacing"
      - include: "#void-functions-wait"
      - include: "#void-functions-string-formatting-and-printing"
      - include: "#void-functions-ramping"
      - include: "#void-functions-encoding"
      - include: "#void-functions-array-operations"
      - include: "#void-functions-delegate-handling"
      - include: "#void-functions-event-handling"
  void-functions-random-number:
    match: (?i)\b(Seed)\b
    name: keyword.support.function.usp
  void-functions-string-parsing:
    match: (?ix)\b(ClearBuffer)\b
    name: keyword.support.function.usp
  void-functions-system-control:
    match: (?ix)\b(delay|ProcessLogic|pulse|WaitForInitializationComplete)\b
    name: keyword.support.function.usp
  void-functions-system-interfacing:
    match: (?ix)\b(GenerateUserNotice|GenerateUserWarning|GenerateUserError|SendPacketToCPU|SendCresnetPacket|SetCresnet|SetSlot|SetCIP)\b
    name: keyword.support.function.usp
  void-functions-wait:
    match: (?i)\b(CancelAllWait|CancelWait|PauseAllWait|PauseWait|ResumeAllWait|ResumeWait|RetimeWait)\b
    name: keyword.support.function.usp
  void-functions-string-formatting-and-printing:
    match: (?i)\b(Makestring|Print|Trace)\b
    name: keyword.support.function.usp
  void-functions-file:
    match: (?ix)\b(ReadStructure|WriteStructure)\b
    name: keyword.support.function.usp
  void-functions-time-and-date:
    match: (?ix)\b(SetDate|SetClock)\b
    name: keyword.support.function.usp
  void-functions-ramping:
    match: (?ix)\b(InitializeRampInfoArray|InitializeRampInfo)\b
    name: keyword.support.function.usp
  void-functions-encoding:
    match: (?i)\b(SetEncoding)\b
    name: keyword.support.function.usp
  void-functions-delegate-handling:
    match: (?i)\b(RegisterDelegate)\b
    name: keyword.support.function.usp
  void-functions-event-handling:
    match: (?i)\b(RegisterEvent)\b
    name: keyword.support.function.usp
  void-functions-array-operations:
    match: (?ix)\b(SetArray)\b
    name: keyword.support.function.usp




  built-in-variables:
    match: (?ix)
      \b(_oem_break|_oem_cd|_oem_cts|_oem_dtr|_oem_long_break|_oem_max_string|_oem_pacing|
      _oem_rts|_oem_str_in|_oem_str_out|FILE_INFO)\b
    name: keyword.support.variable.usp

  built-in-constants:
    match: (?ix)
      \b(_O_APPEND|_O_CREAT|_O_EXCL|_O_TRUNC|_O_TEXT|_O_BINARY|_O_RDONLY|_O_RDWR|_O_WRONLY|ARDONLY|AHIDDEN|ASYSTEM|AVOLUME|ADIRENT|ARCHIVE|ON|OFF)\b
    name: keyword.support.constant.usp

  bracketed-argument-list:
    begin: \[
    beginCaptures:
      '0':
        name: punctuation.squarebracket.open.usp
    end: \]
    endCaptures:
      '0':
        name: punctuation.squarebracket.close.usp
    patterns:
    - include: "#argument"
    - include: "#punctuation-comma"
  argument-list:
    begin: \(
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.usp
    end: \)
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.usp
    patterns:
    - include: "#named-argument"
    - include: "#expressions"
    - include: "#punctuation-comma"
  named-argument:
    match: (@?[_[:alpha:]][_[:alnum:]]*)
    name: entity.name.variable.parameter.cs


#literals
  literals:
    patterns:
    - include: "#numeric-literal"
    - include: "#char-literal"
    - include: "#string-literal"
  numeric-literal:
    match: |-
      (?x)
        (?<!\w)\.?\d #ensure it starts with a digit or period and not a word character
        (?:
          (?:[0-9a-zA-Z_%]|_)| #capture any digit or letter or underscore (anything that resembles a number)
          (?<=[eE])[+-]| # even if it looks scientific
          \.\d #or floating point
        )*
    captures:
      '0':
        patterns:  #with the match above:
        - begin: "(?=.)"
          end: "$"
          patterns:
          - match: |- # grab a hex integer
              (?x)
                (0[xX]) #ensure it starts with a 0x or 0X
                ([0-9a-fA-F](?:[0-9a-fA-F])*)$ #capture rest of hex digits
            captures:
              '1':
                name: constant.numeric.other.prefix.hex.usp
              '2':
                name: constant.numeric.hex.usp
          - match: |-
              (?x)
                (?=[0-9])(?!0[xX]) #ensure it starts with a digit, but not wit a 0x or 0X 
                ([0-9d](?:[0-9d])*)$ #capture rest of decimal digits and d (for parameter properties decimal value)
            captures:
              '1':
                name: constant.numeric.decimal.usp
          - match: |-
              (?ix)
                (?=[0-9a-f])(?!0[xX]) #ensure it starts with a hex digit, but not wit a 0x or 0X 
                ([0-9a-fh](?:[0-9a-fh])*)$ #capture rest of hex digits and h (for parameter properties decimal value)hex value)
            captures:
              '1':
                name: constant.numeric.hex.usp
          - match: |-
              (?x)
                (?=[0-9])(?!0[xX]) #ensure it starts with a digit, but not wit a 0x or 0X 
                ([0-9%](?:[0-9%])*)$ #capture rest of decimal digits and % (for parameter properties percentage value)
            captures:
              '1':
                name: constant.numeric.percentage.usp
          - match: |-
              (?x)
                (?=[0-9])(?!0[xX]) #ensure it starts with a digit, but not wit a 0x or 0X 
                ([0-9s](?:[0-9s])*)$ #capture rest of decimal digits and s (for parameter properties seconds value)
            captures:
              '1':
                name: constant.numeric.seconds.usp
          - match: |-
              (?x)
                (?=[0-9])(?!0[xX]) #ensure it starts with a digit, but not wit a 0x or 0X 
                ([0-9t](?:[0-9t])*)$ #capture rest of decimal digits and t (for parameter properties ticks value)
            captures:
              '1':
                name: constant.numeric.ticks.usp
          - match: (?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\.\d)+ # invalidate anything that did not match hex of decimal
            name: invalid.illegal.constant.numeric.usp
  char-literal:
    name: string.quoted.single.usp
    begin: \'
    beginCaptures:
      '0':
        name: punctuation.definition.char.begin.usp
    end: (\')|((?:[^\n])$) #end with a single quote or anything but newline
    endCaptures:
      '1':
        name: punctuation.definition.char.end.usp
      '2':
        name: invalid.illegal.newline.usp
    patterns:
    - match: ([0-9a-zA-Z]{2,})
      name: invalid.illegal.char.usp
  string-literal:
    name: string.quoted.double.usp
    begin: \"
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.usp
    end: (")|((?:[^\n])$)
    endCaptures:
      '1':
        name: punctuation.definition.string.end.usp
      '2':
        name: invalid.illegal.newline.usp
    patterns:
    - include: "#string-character-escape"
  string-character-escape:
    match: |-
      (?x)
        (\%   #escape initializer character either % or \
          (?:
            (?:[0-9a-zA-Z]|\%)? #grab any digit or letter or % character for next character zero or 1 times
            (?:[0-9a-zA-Z])*    #grab the rest of the digits or letters
          )
        ) |  #or
        (?:\\(?:[a-zA-Z])(?:(?:[0-9a-fA-F]){2})?)|(?:\\\\) #grab any one letter or dual hex number after a backslash or double backslash
    captures:
      "0":
        patterns:  #with the match above:
        - begin: "(?=.)"
          end: "$"
          patterns:
          - match: |- #percent character escape
              (?x)
                (%%) |  # Prints % or
                (%
                  (?:
                    (?:[0-9]?[0-9])? #[[pad]width]
                    (?:
                      d|  #Signed Analog_Input, Analog_Output or Integer as decimal
                      s|  #Buffer_Input, String_Input or String
                      u|  #Unsigned Analog_Input, Analog_Output or integer
                      ld| #Long_Integer as decimal
                      lu| #Long_Unsigned_Integer as decimal
                      x|  #Analog_Input, Analog_Output or Integer as lowercase hexadecimal
                      X|  #Analog_Input, Analog_Output or Integer as uppercase hexadecimal
                      c|  #Printable ASCII character
                    ){1}
                  ) #Print Formatters %[[pad]width]specifier
                )
            name: constant.character.escape.usp
          - match: |- #backslash character escape
              (?x)
                 (\\
                   (?:
                     a|  #Alert (Beep)
                     b|  #Backspace
                     f|  #Form Feed
                     n|  #Newline
                     r|  #Carriage Return
                     t|  #Horizontal Tab
                     v|  #Vertical Tab
                   )
                 ) |
                 (\\
                   (?:
                     [xX](?:[0-9a-fA-F]){2} |  #Hexadecimal character code
                   )
                 ) |
                 (\\\\) | escaped backslash
            name: constant.character.escape.usp
          - match: .* #invalidate anything that did not match the above
            name: invalid.illegal.character.escape.usp




#punctuation
  punctuation:
    patterns:
      - include: "#punctuation-arithmetic"
      - include: "#punctuation-bitwise"
      - include: "#punctuation-comparison-unequal"
      - include: "#punctuation-relational"
      - include: "#punctuation-equal"
      - include: "#punctuation-grouping"
      - include: "#punctuation-structure"
  punctuation-arithmetic:
    match: "(?i)\\+|-(?!>)|\\*|\\/|S\\/|%|mod|umod"
    name: keyword.operator.arithmetic.usp
  punctuation-bitwise:
    patterns:
      - name: keyword.operator.bitwise.shift.usp
        match: (?i)<<|>>
      - name: keyword.operator.bitwise.rotate.usp
        match: "{{|}}"
      - name: keyword.operator.bitwise.usp
        match: (?i)\&|not|\^|\|
      - name: keyword.operator.bitwise.usp
        match: \!|&&|\|\|
  punctuation-comparison-unequal:
    patterns:
      - name: keyword.operator.comparison.usp
        match: (<>)
  punctuation-relational:
    patterns:
      - name: keyword.operator.relational.usp
        match: <=|>=|<|>|S<=|S>=|S<|S>
  punctuation-equal:
      begin: "[^=]+(=)"
      beginCaptures:
            "1":
              name: keyword.operator.assignment.usp
      end: (;)
      endCaptures:
            "1":
              name: punctuation.terminator.statement.usp
      patterns:
        - match: (=)
          name: keyword.operator.comparison.usp
  punctuation-assignment:
    patterns:
    - match: =
      name: keyword.operator.assignment.usp
  punctuation-grouping:
    patterns:
    - include: "#punctuation-square-bracket"
    - include: "punctuation-parenthesis"
    - include: "punctuation-curlybrace"
  punctuation-structure:
    patterns:
    - include: "#punctuation-comma"
    - include: "#punctuation-semicolon"
    - include: "#punctuation-parenthesis"
    - include: "#punctuation-accessor"
    - include: "#punctuation-dot"
    - include: "#punctuation-pipe"
  punctuation-square-bracket:
    begin: \[
    beginCaptures:
      '0':
        name: punctuation.squarebracket.open.usp
    end: \]
    endCaptures:
      '0':
        name: punctuation.squarebracket.close.usp
    patterns:
    - include: "#intrusive"
    - include: "#punctuation-comma"
  punctuation-curlybrace:
    begin: \{
    beginCaptures:
      '0':
        name: punctuation.curlybrace.open.usp
    end: \}
    endCaptures:
      '0':
        name: punctuation.curlybrace.close.usp
    patterns:
    - include: "#intrusive"
    - include: "#punctuation-comma"
  punctuation-parenthesis:
    begin: (\()
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.usp
    end: (\))
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.usp
    patterns:
    - include: "#expression"
  punctuation-comma:
    match: \,
    name: punctuation.comma.usp
  punctuation-semicolon:
    match: \;
    name: punctuation.terminator.usp
  punctuation-dot:
    match: (\.)
    name: punctuation.structure.dot.usp
  punctuation-pipe:
    match: (\|)
    name: punctuation.structure.pipe.usp








#Types
  type:
    patterns:
    - include: "#comment"
    - include: "#ref-modifier"
    - include: "#type-builtin"
    - include: "#type-name"

  type-builtin:
    match: (?ix)\b(integer|long_integer|signed_integer|signed_long_integer|string|structure)\b
    comment: Crestron Built In Types
    name: keyword.type.$1.usp
  type-name:
    patterns:
    - match: (?(@?[_[:alpha:]][\_\#\_\$[:alnum:]]*)\s*(\.))
      captures:
        '1':
          name: entity.name.type.usp
        '2':
          name: punctuation.accessor.usp
    - match: (?:(\.)\s*(@?[_[:alpha:]][\_\#\_\$_[:alnum:]]*))
      captures:
        '1':
          name: punctuation.accessor.usp
        '2':
          name: entity.name.type.usp
    - name: entity.name.type.usp
      match: (@?[_[:alpha:]][\_\#\_\$_[:alnum:]]*)

  designation-pattern:
    patterns:
    - include: "#intrusive"
    - begin: "\\("
      beginCaptures:
        '0':
          name: punctuation.parenthesis.open.usp
      end: "\\)"
      endCaptures:
        '0':
          name: punctuation.parenthesis.close.usp
      patterns:
      - include: "#punctuation-comma"
      - include: "#designation-pattern"
    - include: "#simple-designation-pattern"
  simple-designation-pattern:
    patterns:
    - match: |-
        (?x)
        (?:
          ([_[:alpha:]][\#\$\_[:alnum:]]*) #Name
          (?:\s*                   # array suffix?
            (?:(\[)\d*(\])\s*)
            (?:(\[)\d*(\])\s*)?
          )?
        )
      captures:
        "1":
          name: entity.name.variable.local.usp
        "2":
          name: punctuation.squarebracket.open.usp
        "3":
          name: punctuation.squarebracket.close.usp
        "4":
          name: punctuation.squarebracket.open.usp
        "5":
          name: punctuation.squarebracket.close.usp





