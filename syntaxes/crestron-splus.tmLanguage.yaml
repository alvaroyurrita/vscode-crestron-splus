---
scopeName: source.splus
fileTypes:
  - usp
  - usl
  - csp
  - csl
name: Crestron
patterns:
  - include: "#preprocessor"
  - include: "#script-top-level"
  - include: "#comment"
# - include: "#declarations"
# - include: "#script-top-level"

# - include: "#crestron_keywords"
# - include: "#comments"
# - include: "#numbers"
# - include: "#string"
# - include: "#expression"

# - comment: help text highlighting
#   begin: "(?i)(#help_begin)"
#   beginCaptures:
#     '1':
#       name: keyword.other.preprocessor.usp
#   end: "(?i)(#help_end)"
#   endCaptures:
#     '1':
#       name: keyword.other.preprocessor.usp
#   name: string.unquoted.usp

# - comment: Properties Description Highlight
#   begin: "(?i)(#\\b(BEGIN_PROP_FULL_DESCRIPTION|BEGIN_PROP_NOTES)\\b)"
#   beginCaptures:
#     '1':
#       name: keyword.other.preprocessor.usp
#   end: "(?i)(#\\b(END_PROP_FULL_DESCRIPTION|END_PROP_NOTES)\\b)"
#   endCaptures:
#     '1':
#       name: keyword.other.preprocessor.usp
#   name: string.unquoted.usp

# - match: "(?i)\\s*(push|change|release)\\s+(([\\w_$]+\\s*,?\\s*)+)"
#   captures:
#     '1':
#       name: keyword.control.usp
#     '2':
#       name: entity.name.function.usp
#   comment: named event name highlighting
#   name: meta.function.usp
#   patterns:
#   - include: "#comments"
#   - include: "#parens"

# - match: "(?i)\\b(event)\\b"
#   captures:
#     '1':
#       name: keyword.control.usp
#   comment: generic event name highlighting
#   name: meta.function.usp
#   patterns:
#   - include: "#comments"
#   - include: "#parens"

# - begin: "(?i)(function|integer_function|signed_integer_function|long_integer_function|signed_long_integer_function|string_function|callback
#     function|callback integer_function|callback signed_integer_function|callback long_integer_function|callback
#     signed_long_integer_function|callback gathereventhandler|eventhandler)\\s+([\\w_]*)"
#   beginCaptures:
#     '1':
#       name: support.class.usp
#     '2':
#       name: keyword.control.usp
#     '3':
#       name: entity.name.function.usp
#   comment: function name highlighting
#   end: "(\\()|({)|(?<=\\})|(?=#)|(;)"
#   name: meta.function.usp
#   patterns:
#   - include: "#comments"
#   - include: "#parens"

# # - comment: Function use highlighting
# #   match: "([\\w]*\\.)?([\\w]*)\\s*\\((.{0,})\\)"
# #   captures:
# #     '1':
# #       name: support.class
# #     '2':
# #       name: support.function.usp
# #     '3':
# #       name: function.parameter.usp
# #       patterns:
# #       - include: "#string"

# - comment: Define Constants
#   match: "(?i)(#define_constant)\\s+(\\w+)"
#   captures:
#     '1':
#       name: keyword.other.preprocessor.usp
#     '2':
#       name: variable.other.usp

# - begin: "(?i)\\b(digital_input|analog_input|analog_output|buffer_input|digital_output|string_input|string_output)\\b"
#   beginCaptures:
#     '1':
#       name: keyword.other.preprocessor.usp
#   end: "(;)"
#   endCaptures:
#     '1':
#       name: punctuation.terminator.statement.usp
#   name: entity.name.function.usp
#   patterns:
#   - include: "#crestron_keywords"
#   - include: "#comments"
#   - include: "#punctuation-comma"

repository:
  script-top-level:
    patterns:
      - include: "#statement"
  statement:
    patterns:
      - include: "#expression"
      - include: "#local-declarations"

  expression:
    patterns:
      - include: "#preprocessor"
      - include: "#comment"
      - include: "#expression-operator-expression"
      #     #   - include: "#type-operator-expression"
      #     #   - include: "#default-literal-expression"
      #     #   - include: "#throw-expression"
      #     #   - include: "#raw-interpolated-string"
      #     #   - include: "#interpolated-string"
      #     #   - include: "#verbatim-interpolated-string"
      #     #   - include: "#type-builtin"
      #     #   - include: "#language-variable"
      #     #   - include: "#switch-statement-or-expression"
      #     #   - include: "#with-expression"
      #     #   - include: "#conditional-operator"
      - include: "#assignment-expression"
      - include: "#expression-operators"
      # - include: "#string-literal"
      #     #   - include: "#await-expression"
      #     #   - include: "#query-expression"
      #     #   - include: "#as-expression"
      #     #   - include: "#is-expression"
      #     #   - include: "#anonymous-method-expression"
      #     #   - include: "#object-creation-expression"
      #     #   - include: "#array-creation-expression"
      #     #   - include: "#anonymous-object-creation-expression"
      - include: "#invocation-function"
      #     #   - include: "#member-access-expression"
      #     #   - include: "#element-access-expression"
      #     #   - include: "#cast-expression"
      - include: "#literal"
      - include: "#parenthesized-expression"
      #     #   - include: "#tuple-deconstruction-assignment"
      #     #   - include: "#initializer-expression"
      - include: "#identifier"



  #   string:
  #     patterns:
  #     - include: "#qstring-single"
  #     - include: "#qstring-double"

  #   qstring-double:
  #     name: string.quoted.double.usp
  #     begin: "\""
  #     beginCaptures:
  #       '0':
  #         name: punctuation.definition.string.begin.usp
  #     end: (")|((?:[^\\\n])$)
  #     endCaptures:
  #       '1':
  #         name: punctuation.definition.string.end.usp
  #       '2':
  #         name: invalid.illegal.newline.usp
  #     patterns:
  #     - include: "#string-character-escape"

  #   qstring-single:
  #     name: string.quoted.single.usp
  #     begin: "'"
  #     beginCaptures:
  #       '0':
  #         name: punctuation.definition.string.begin.usp
  #     end: "(')|(?<!\\\\)(?=\\s*\\n)"
  #     endCaptures:
  #       '1':
  #         name: punctuation.definition.string.end.usp
  #       '2':
  #         name: invalid.illegal.newline.usp
  #     patterns:
  #     - include: "#string-character-escape"

  #   string-character-escape:
  #     name: constant.character.escape.usp
  #     match: \\(?:[abefnrtv'"\\]|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|[0-1]\d{2}|25[0-5]|2[0-4][0-9]|$)|%(?:(?:\d+)?(?:\.\d+)?)?(?:d|i|f|s|u|hi|hu|ld|li|lu)|%(?:\d+)?[xX]|%[%cno]

  #   crestron_keywords:
  #     patterns:

  #     - comment: Crestron Compiler Directives
  #       match: "(?ix)(\\#\\b(analog_serial_expand|symbol_name|large_stack|print_to_trace|max_internal_buffer_size|digital_expand|
  #         analog_serial_expand|output_shift|category|user_library|crestron_library|user_simplsharp_library|
  #         crestron_simplsharp_library|includepath|default_volatile|default_nonvolatile|enable_trace|
  #         enable_dynamic|enable_stack_checking|encoding_ascii|encoding_utf16|encoding_inherit_from_parent|
  #         encoding_inherit_from_program|help|help_pdf_file|hint|if_defined|if_not_defined|endif|if_series2|if_series3|if_series4)\\b)"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron Parameter Properties
  #       match: "(?ix)(\\#\\b(begin_parameter_properties|end_parameter_properties|propValidUnits|propDefaultUnit|propList|
  #         propShortDescription|propBounds|propShortDescription)\\b)"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron Parameter Properties
  #       match: "(?ix)(\\b(propValidUnits|propDefaultUnit|propDefaultValue|propList|propShortDescription|propBounds|propShortDescription)\\b)"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron Joins
  #       match: "(?ix)(\\#\\b(analog_input_join|analog_output_join|digital_input_join|digital_output_join|string_input_join|string_output_join)\\b)"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron I/O Declarations
  #       match: "(?ix)\\b(integer_parameter|signed_long_integer_parameter|long_integer_parameter|volatile
  #         |dynamic|nonvolatile|volatile|signed_integer_parameter|
  #         signed_long_integer_parameter|string_parameter|structure)\\b"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron Declarations Modifiers
  #       match: "(?x)\\b(ascii|utf16|inherit)\\b"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron Socket Declarations
  #       match: "(?ix)\\b(tcp_client|tcp_server|udp_socket)\\b"
  #       name: keyword.other.preprocessor.usp

  #     - comment: Crestron Variable Types
  #       match: "(?ix)\\b(integer|long_integer|signed_integer|signed_long_integer|string|structure|cmutex|cevent|file_info)\\b"
  #       name: storage.type.usp

  #     - comment: Crestron Threadsafe
  #       match: "(?ix)\\b(threadsafe)\\b"
  #       name: storage.type.usp

  #     - comment: Crestron Skip Type
  #       match: "(?i)\\b(_skip_)\\b"
  #       name: storage.type.skip.usp

  #     - comment: Crestron Boolean Types
  #       match: "(?ix)\\b(true|false)\\b"
  #       name: constant.language.boolean.usp

  #     - comment: Crestron Statements
  #       match: "(?ix)\\b(return|case|default)\\b"
  #       name: keyword.control.usp

  #     - comment: Crestron Exceptions
  #       match: "(?ix)\\b(try|catch)\\b"
  #       name: keyword.control.usp

  #     - comment: Crestron Exception Functions
  #       match: "(?ix)\\b(GetExceptionCode|GetExceptionMessage)\\b"
  #       name: support.function.usp

  #     - comment: Crestron constants
  #       match: "(?ix)\\b(_O_APPEND|_O_CREAT|_O_EXCL|_O_TRUNC|_O_TEXT|_O_BINARY|_O_RDONLY|_O_RDWR|_O_WRONLY|ARDONLY|AHIDDEN|ASYSTEM|AVOLUME|ADIRENT|ARCHIVE)\\b"
  #       name: support.constant.media.usp

  #     - comment: Crestron Conditionals
  #       match: "(?ix)\\b(break|continue|switch|cswitch|if|else|do|until|for|while)\\b"
  #       name: keyword.control.usp

  #     - comment: Crestron Array Functions
  #       match: "(?ix)\\b(GetLastModifiedArrayIndex|GetNumArrayCols|GetNumArrayRows|GetNumStructureArrayCols|
  #         ResizeArray|ResizeStructureArray|SetArray)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Bit/Byte Functions
  #       match: "(?ix)\\b(Bit|Byte|High|HighWord|Low|LowWord|LowerChar|RotateLeft|RotateLeftLong|RotateRight|
  #         RotateRightLong|SetByte|UpperChar)\\b"
  #       name: support.function.usp

  #     - comment: Crestron CEN-OEM Functions
  #       match: "(?ix)\\b(_oem_break|_oem_cd|_oem_cts|_oem_dtr|_oem_long_break|_oem_max_string|_oem_pacing|
  #         _oem_rts|_oem_str_in|_oem_str_out)\\b"
  #       name: support.function.cen-oem.usp

  #     - comment: Crestron Data Conversion Functions
  #       match: "(?ix)\\b(Atoi|Atosi|Atol|Atosl|Chr|HexToI|HexToL|HexToSI|HexToSL|Itoa|Itohex|Ltoa|Ltohex)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Socket Access Functions
  #       match: "(?ix)\\b(SocketConnect|SocketConnectClient|SocketDisconnect|SocketDisconnectClient|
  #         SocketGetAddressAsRequested|SocketGetPortNumber|SocketGetRemoteIPAddress|SocketGetSenderIPAddress|
  #         SocketGetStatus|SocketIsBroadcast|SocketIsMulticast|SocketReceive|SocketSend|SocketServerStartListen|
  #         SocketServerStopListen|SocketStatus|SocketUDP_Disable|SocketUDP_Enable)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Email Functions
  #       match: "(?ix)\\b(SendMail|SendMailAdvance|SendMailWithAttachments)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Encoding Functions
  #       match: "(?ix)\\b(GetEncoding|SetEncoding|ToAscii|ToUtf16)\\b"
  #       name: support.function.usp

  #     - comment: Crestron File Functions
  #       match: "(?ix)\\b(FILE_INFO|FileBOF|FileClose|FileDelete|FileDeleteShared|FileEOF|FileLength|
  #         FileOpen|FileOpenShared|FileRead|FileSeek|FileWrite|FindClose|FindFirst|FindFirstShared|FindNext|
  #         IsDirectory|IsHidden|IsReadOnly|IsSystem|IsVolume|MakeDirectory|MakeDirectoryShared|ReadInteger|
  #         ReadIntegerArray|ReadLongInteger|ReadLongIntegerArray|ReadSignedInteger|ReadSignedIntegerArray|
  #         ReadSignedLongInteger|ReadSignedLongIntegerArray|ReadString|ReadStringArray|ReadStructure|
  #         RemoveDirectory|RemoveDirectoryShared|SetCurrentDirectory|StartFileOperations|EndFileOperations|WaitForNewDisk|
  #         WriteInteger|WriteIntegerArray|WriteLongInteger|WriteLongIntegerArray|WriteSignedInteger|
  #         WriteSignedIntegerArray|WriteSignedLongInteger|WriteSignedLongIntegerArray|WriteString|WriteStringArray|WriteStructure)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Math Functions
  #       match: "(?ix)\\b(abs|max|min|muldiv|smax|smin)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Ramp Functions
  #       match: "(?i)\\b(CompareRampsByAttribute|CompareRampsByID|CreateRamp|GetRampInfo|InitializeRampInfo|
  #         InitializeRampInfoArray|IsRamping|RAMP_INFO|StopRamp)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Random Number Functions
  #       match: "(?ix)\\b(Random|Rnd|Seed)\\b"
  #       name: support.function.usp

  #     - comment: Crestron String Functions
  #       match: "(?ix)\\b(Makestring|Print|Trace|ClearBuffer|CompareStrings|CompareStringsNoCase|Find|
  #         FindNoCase|Gather|GatherByLength|GatherAsync|GatherAsyncByLength|GatherByLengthWithDest|ReArmGatherAsync|RemoveGatherAsync|
  #         GetC|Left|Len|Lower|Upper|Mid|Remove|RemoveByLength|ResizeString|ReverseFind|ReverseFindNoCase|Right|SetString)\\b"
  #       name: support.function.usp

  #     - comment: Crestron System Control Functions
  #       match: "(?ix)\\b(delay|ProcessLogic|pulse|TerminateEvent|WaitForInitializationComplete)\\b"
  #       name: support.function.usp

  #     - comment: Crestron System Initialization Functions
  #       match: "(?ix)\\b(GenerateUserError|GenerateUserNotice|GenerateUserWarning|GetCIP|GetCrestnet|
  #         GetModelNumber|GetProgramNumber|GetSeries|GetSlot|GetSymbolInstanceName|GetSymbolReferenceName|
  #         IsSignalDefined|MakeProgramFilename|SendCresnetPacket|SendPacketToCPU|SetCIP|SetCresnet|SetSlot|RegisterDelegate|RegisterEvent)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Time/Date Functions
  #       match: "(?ix)\\b(Date|Day|FileDate|FileDay|FileGetDateNum|FileGetDayOfWeekNum|FileGetHourNum|
  #         FileGetMinutesNum|FileGetMonthNum|FileGetSecondsNum|FileGetYearNum|FileMonth|FileTime|GetDateNum|
  #         GetDayOfWeekNum|GetDST|GetGMTOffset|GetHourNum|GetHSeconds|GetMinutesNum|GetMonthNum|GetSecondsNum|
  #         GetTicks|GetYearNum|month|SetClock|SetDate|SetGMTOffset|Time)\\b"
  #       name: support.function.usp

  #     - comment: Crestron Wait Functions
  #       match: "(?ix)\\b(CancelAllWait|CancelWait|PauseAllWait|PauseWait|ResumeAllWait|ResumeWait|RetimeWait|Wait)\\b"
  #       name: support.function.wait.usp

  #   parens:
  #     begin: "\\("
  #     end: "\\)"
  #     name: meta.parens.usp
  #     patterns:
  #     - include: "$base"





  #   invocation-expression:
  #     begin: >
  #       (?x)
  #       (?:
  #         (\\.)\\s*                                       # preceding dot?
  #       )?
  #       ([\\_[:alpha:]][\\_[:alnum:]]*)\\s*               # method name
  #       (?=\\()                                           # open paren of argument list
  #     beginCaptures:
  #       "1":
  #         name: "punctuation.accessor.usp"
  #       "2":
  #         name: "entity.name.function.usp"
  #     end: "(?<=\\))"
  #     patterns:
  #       - include: "#argument-list"

  #   argument-list:
  #     begin: "\\("
  #     beginCaptures:
  #       "0":
  #         name: "punctuation.parenthesis.open.usp"
  #     end: "\\)"
  #     endCaptures:
  #       "0":
  #         name: "punctuation.parenthesis.close.usp"
  #     patterns:
  #       - include: "#argument"
  #       - include: "#punctuation-comma"

  #   argument:
  #     patterns:
  #       - name: "storage.modifier.$1.usp"
  #         match: "(?i)\\b(ByRef|ByVal|ReadOnlyByRef)\\b"
  #       - include: "#expression"

#Groups
  intrusive:
    patterns:
    - include: "#preprocessor"
    - include: "#comment"

#Directives and Preprocessor
  preprocessor:
    name: meta.preprocessor.usp
    begin: ^\s*(\#)
    beginCaptures:
      "1":
        name: punctuation.separator.hash.usp
    end: (?<=$)
    patterns:
      - include: "#comment"
      - include: "#preprocessor-define-constant"
      - include: "#preprocessor-if-ifnot-defined"
      - include: "#preprocessor-endif"
      - include: "#preprocessor-category"
      - include: "#preprocessor-library"
      - include: "#preprocessor-include-path"
      - include: "#preprocessor-symbol-name"
      - include: "#preprocessor-hint"
      - include: "#preprocessor-help"
      - include: "#preprocessor-default-nonvolatile-volatile"
      - include: "#preprocessor-analog-digital-expand"
      - include: "#preprocessor-output-shift"
      - include: "#preprocessor-max-internal-buffer-size"
      - include: "#preprocessor-single"
      - include: "#preprocessor-begin-parameter-properties"
      - include: "#preprocessor-end-parameter-properties"
  preprocessor-define-constant:
    begin: >
      (?ix)\G
        \b(define_constant)\b\s*  #Directive
        \b([_[:alpha:]][\#\$\_[:alnum:]]*)\b\s* #Constant Name
    end: (?=$)
    beginCaptures:
      "1":
        name: keyword.preprocessor.defineconstant.usp
      "2":
        name: entity.name.variable.preprocessor.symbol.usp
    patterns:
      - match: (\G0[xX])([[:xdigit:]]{1,4})
        captures:
          "1":
            name: constant.numeric.other.prefix.hex.usp
          "2":
            name: constant.numeric.hex.usp
      - match: (\G[0-9]+)
        name: constant.numeric.decimal.usp
      - match: (\G\'.\')
        name: constant.character.usp
      - match: (\G\".*?\")
        name: string.quoted.double.usp
  preprocessor-if-ifnot-defined:
    begin: >
      (?ix)\G
        \b(if_defined)|(if_not_defined)\b #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.ifdefined.usp
      "2":
        name: keyword.preprocessor.ifnotdefined.usp
    end: (?=$)
    patterns:
      - include: "#comment"
      - match: "\\b([_[:alpha:]][\\#\\$\\_[:alnum:]]*)\\b"
        name: entity.name.variable.preprocessor.symbol.usp
  preprocessor-endif:
    match: >
      (?ix)\G
        \b(endif)\b #Directive
    captures:
      "1":
        name: keyword.preprocessor.endif.usp
  preprocessor-category:
    begin: >
      (?ix)\G
        \b(category)\b\s* #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.category.usp
    end: (?=$)
    patterns:
      - match: \G\"[0-9]*?\"
        name: constant.numeric.category.usp
  preprocessor-library:
    begin: >
      (?ix)\G
        \b((?:(?:user_simplsharp|crestron_simplsharp|user|crestron)_)library)\b\s*
    beginCaptures:
      "1":
        patterns:
          - match: (?i)((?:user_simplsharp).*)
            name: keyword.preprocessor.usersimplsharplibrary.usp
          - match: (?i)((?:crestron_simplsharp).*)
            name: keyword.preprocessor.crestronsimplsharplibrary.usp
          - match: (?i)((?:user).*)
            name: keyword.preprocessor.userlibrary.usp
          - match: (?i)((?:crestron).*)
            name: keyword.preprocessor.crestronlibrary.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-include-path:
    begin: >
      (?ix)\G
        \b(includepath)\b\s* #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.includepath.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-symbol-name:
    begin: >
      (?ix)\G
        \b(symbol_name)\b\s* #Directive
    beginCaptures:
      '1':
        name: keyword.preprocessor.symbolname.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-hint:
    begin: >
      (?ix)\G
        \b(hint)\b\s* #Directive
    beginCaptures:
      '1':
        name: keyword.preprocessor.hint.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-help:
    begin: >
      (?ix)\G
        \b(help)\b\s* #Directive
    beginCaptures:
      '1':
        name: keyword.preprocessor.help.usp
    end: (?=$)
    patterns:
      - match: \G(\".*?\")
        name: string.quoted.double.usp
  preprocessor-default-nonvolatile-volatile:
    match: >
      (?ix)\G
        \b(default_nonvolatile)|(default_volatile)\b #Directive
    captures:
      '1':
        name: keyword.preprocessor.defaultnonvolatile.usp
      '2':
        name: keyword.preprocessor.defaultvolatile.usp
  preprocessor-analog-digital-expand:
    begin: >
      (?ix)\G
        \b(?:(analog_serial_expand)|(digital_expand))\b\s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.analogserialexpand.usp
      '2':
        name: keyword.preprocessor.digitalexpand.usp
    patterns:
      - match: >
          (?ix)\G
            ([a-z]+)$
        name: keyword.control.option.usp
  preprocessor-output-shift:
    begin: >
      (?ix)\G
        \b(output_shift)\b\s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.outputshift.usp
    patterns:
      - match: \G[0-9]+
        name: constant.numeric.decimal.usp
  preprocessor-max-internal-buffer-size:
    begin: >
      (?ix)\G
        \b(max_internal_buffer_size)\b\s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.outputshift.usp
    patterns:
      - match: \G[0-9]+
        name: constant.numeric.decimal.usp
  preprocessor-single:
    begin: >
      (?ix)\G
        (?:\b
          (?:
            (print_to_trace)|
            (enable_dynamic)|
            (enable_stack_checking)|
            (large_stack)|
            (enable_trace)|
            (encoding_ascii)|
            (encoding_inherit_from_parent)|
            (encoding_inherit_from_program)|
            (encoding_utf16)
          )\b)
          \s* #Directive
    end: (?=$)
    beginCaptures:
      '1':
        name: keyword.preprocessor.printtotrace.usp
      '2':
        name: keyword.preprocessor.enabledynamic.usp
      '3':
        name: keyword.preprocessor.enablestackchecking.usp
      '4':
        name: keyword.preprocessor.largestack.usp
      '5':
        name: keyword.preprocessor.enabletrace.usp
      '6':
        name: keyword.preprocessor.encodingascii.usp
      '7':
        name: keyword.preprocessor.encodinginheritfromparent.usp
      '8':
        name: keyword.preprocessor.encodinginheritfromprogram.usp
      '9':
        name: keyword.preprocessor.encodingutf16.usp
  preprocessor-begin-parameter-properties:
    begin: >
      (?ix)\G
        \b(begin_parameter_properties)\b #Directive
    beginCaptures:
      "1":
        name: keyword.preprocessor.beginparameterproperties.usp
    end: (?=$)
    patterns:
      - include: "#identifier"
      - include: "#punctuation-comma"
  preprocessor-end-parameter-properties:
    match: >
      (?ix)\G
        \b(end_parameter_properties)\b #directive
    captures:
      "1":
        name: keyword.preprocessor.endparameterproperties.usp                        






  local-declarations:
    patterns:
    - include: "#local-variable-declaration"


  local-variable-declaration:
    begin: >
      (?ix)
      (?:
        (?:(dynamic|volatile|nonvolatile|ascii|utf16|inherit)?\s+)? # declaration modifier
        (?<type_name>
          (?:
            (?:
              (?<identifier>[_[:alpha:]][\#\$\_[:alnum:]]*)
              (?:\s*\.\s*\g<identifier>)* | # Are there any more names being dotted into?
            )
          )
        )
      )\s+
      (
        (\g<identifier>)\s*
        (?:\s*                 # array suffix?
            (?:(\[)\d*(\])\s*)
            (?:(\[)\d*(\])\s*)?
        )?
      )
      (?=,|;|=|\))
    beginCaptures:
      '1':
        name: storage.modifier.$1.usp
      '2':
        patterns:
        - include: "#type"
      '4':
        patterns:
          - include: "#simple-designation-pattern"

    end: "(?=[;)}])"
    patterns:
    - include: "#simple-designation-pattern"
    - include: "#punctuation-comma"
    - include: "#comment"
    - include: "#variable-initializer"


#Functions
  invocation-function:
    begin: |-
      (?ix)
      (?:
        (\.)\s*|                                        # preceding dot?
      )?
      (@?[_[:alpha:]][\#\$\_[:alnum:]]*)\s*                  # method name
      (?=\()                                            # open paren of argument list
    beginCaptures:
      '1':
        name: punctuation.accessor.usp
      '2':
        name: entity.name.function.usp
    end: "(?<=\\))"
    patterns:
    - include: "#argument-list"
  parenthesized-parameter-list:
    begin: "(\\()"
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.usp
    end: "(\\))"
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.usp
    patterns:
    - include: "#comment"
    - include: "#attribute-section"
    - include: "#parameter"
    - include: "#punctuation-comma"
  parameter:
    match: |-
      (?ix)
      (?:(?:\b(ByRef|ByVal|ReadOnlyByRef)\b)\s+)?
      (?<type_name>
       (?:
          (?:
            (?<identifier>[_[:alpha:]][\#\$\_[:alnum:]]*)
            (?:\s*\.\s*\g<identifier>)* | # Are there any more names being dotted into?
          )
          (?:\s* # array suffix?
            \[
              (?:\s*,\s*)* # commata for multi-dimensional arrays
            \]
            \s*
          )*
        )
      )\s+
      (\g<identifier>)
    captures:
      '1':
        name: storage.modifier.$1.usp
      '2':
        patterns:
        - include: "#type"
      '4':
        name: entity.name.variable.parameter.usp

  bracketed-argument-list:
    begin: \[
    beginCaptures:
      '0':
        name: punctuation.squarebracket.open.usp
    end: \]
    endCaptures:
      '0':
        name: punctuation.squarebracket.close.usp
    patterns:
    - include: "#argument"
    - include: "#punctuation-comma"
  argument-list:
    begin: \(
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.usp
    end: \)
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.usp
    patterns:
    - include: "#argument"
    - include: "#punctuation-comma"
  argument:
    patterns:
    - name: storage.modifier.$1.usp
      match: (?i)\b(ByRef|ByVal|ReadOnlyByRef)\\b"
    - include: "#expression"


#Types
  type:
    patterns:
    - include: "#comment"
    - include: "#ref-modifier"
    - include: "#type-builtin"
    - include: "#type-name"

  type-builtin:
    match: (?ix)\b(integer|long_integer|signed_integer|signed_long_integer|string|structure)\b
    comment: Crestron Built In Types
    name: keyword.type.$1.usp
  type-name:
    patterns:
    - match: (?(@?[_[:alpha:]][\_\#\_\$[:alnum:]]*)\s*(\.))
      captures:
        '1':
          name: entity.name.type.usp
        '2':
          name: punctuation.accessor.usp
    - match: (?:(\.)\s*(@?[_[:alpha:]][\_\#\_\$_[:alnum:]]*))
      captures:
        '1':
          name: punctuation.accessor.usp
        '2':
          name: entity.name.type.usp
    - name: entity.name.type.usp
      match: (@?[_[:alpha:]][\_\#\_\$_[:alnum:]]*)

  designation-pattern:
    patterns:
    - include: "#intrusive"
    - begin: "\\("
      beginCaptures:
        '0':
          name: punctuation.parenthesis.open.usp
      end: "\\)"
      endCaptures:
        '0':
          name: punctuation.parenthesis.close.usp
      patterns:
      - include: "#punctuation-comma"
      - include: "#designation-pattern"
    - include: "#simple-designation-pattern"
  simple-designation-pattern:
    patterns:
    - match: >
        (?x)
        (?:
          ([_[:alpha:]][\#\$\_[:alnum:]]*) #Name
          (?:\s*                   # array suffix?
            (?:(\[)\d*(\])\s*)
            (?:(\[)\d*(\])\s*)?
          )?
        )
      captures:
        "1":
          name: entity.name.variable.local.usp
        "2":
          name: punctuation.squarebracket.open.usp
        "3":
          name: punctuation.squarebracket.close.usp
        "4":
          name: punctuation.squarebracket.open.usp
        "5":
          name: punctuation.squarebracket.close.usp

#Constructs
  type-array-suffix:
    begin: \[
    beginCaptures:
      '0':
        name: punctuation.squarebracket.open.usp
    end: \]
    endCaptures:
      '0':
        name: punctuation.squarebracket.close.usp
    patterns:
    - include: "#intrusive"
    - include: "#punctuation-comma"

#Variables
  # identifier:
  #   match: ([\_[:alpha:]][\_\#\_\$[:alnum:]]*)
  #   name: "variable.other.readwrite.usp"


#Expressions
  assignment-expression:
    begin: \=(?!=|>)"
    beginCaptures:
      "0":
        patterns:
          - include: "#assignment-operators"
    end: (?=[,\)\];}])
    patterns:
      - include: "#expression"
  parenthesized-expression:
    begin: \(
    beginCaptures:
      '0':
        name: punctuation.parenthesis.open.usp
    end: \)
    endCaptures:
      '0':
        name: punctuation.parenthesis.close.usp
    patterns:
    - include: "#expression"
  string-literal:
    name: string.quoted.double.usp
    begin: \"
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.usp
    end: (")|((?:[^\\\n])$)
    endCaptures:
      '1':
        name: punctuation.definition.string.end.usp
      '2':
        name: invalid.illegal.newline.usp
    patterns:
    - include: "#string-character-escape"
  expression-operator-expression:
    begin: (\()
    beginCaptures:
      "1":
        name: punctuation.parenthesis.open.usp
    end: \)
    endCaptures:
      "0":
        name: punctuation.parenthesis.close.usp
    patterns:
      - include: "#expression"

#Math Assignment Operators
  assignment-operators:
    patterns:
      - name: keyword.operator.assignment.usp
        match: "\\="


#Math Operators
  expression-operators:
    patterns:
      - name: keyword.operator.bitwise.shift.usp
        match: "(?i)<<|>>"
      - name: keyword.operator.bitwise.rotate.usp
        match: "{{|}}"
      - name: keyword.operator.comparison.usp
        match: "=|<>"
      - name: keyword.operator.relational.usp
        match: "<=|>=|<|>|S<=|S>=|S<|S>"
      - name: keyword.operator.logical.usp
        match: "\\!|&&|\\|\\|"
      - name: keyword.operator.bitwise.usp
        match: "(?i)\\&|not|\\^|\\|"
      - name: keyword.operator.arithmetic.usp
        match: "(?i)\\+|-(?!>)|\\*|\\/|S\\/|%|mod|umod"



# operands
  string-character-escape:
    name: constant.character.escape.usp
    match: >
      (?x)
        (\\ #escape initializer character
          (?:
            [abfnrt\'\"\\]| #Static Specification String #AudibleAlert, Backspace, Formfeed, CRLF, CR, Tab, SingleQuote, DoubleQuote, Backslash
            x[0-9A-Fa-f]{2}| #Hexadecimal Constant
          )|
          %(?:[0-9]?[0-9])? #[[pad]width]
            (?:
              d| #Signed Analog_Input, Analog_Output or Integer as decimal
              s| #Buffer_Input, String_Input or String
              u| #Unsigned Analog_Input, Analog_Output or integer
              ld| #Long_Integer as decimal
              lu| #Long_Unsigned_Integer as decimal
              %   #Prints % 
            )| #Print Formatters %[[pad]width]specifier
          %(?:
              x| #Analog_Input, Analog_Output or Integer as lowercase hexadecimal
              X| #Analog_Input, Analog_Output or Integer as uppercase hexadecimal
          )
        )


  numbers:
      match: \b((0x[a-fA-F0-9]{1,8})|([0-9]+))\b
      name: constant.numeric.usp




#Literals
  literal:
      patterns:
      # - include: "#boolean-literal"
      # - include: "#null-literal"
      - include: "#numeric-literal"
      - include: "#char-literal"
      - include: "#string-literal"
      # - include: "#raw-string-literal"
      # - include: "#verbatim-string-literal"
      # - include: "#type-operator-expression"
      # - include: "#expression-operator-expression"
      - include: "#expression-operators"
      # - include: "#casted-constant-pattern"

  numeric-literal:
    match: >
      (?x)
        (?<!\w)\.?\d
        (?:
          (?:[0-9a-zA-Z_]|_)| #capture any digit or letter or underscore (anything that resembles a number)
          (?<=[eE])[+-]| # even if it looks scientific
          \.\d #or floating point
        )*
    captures:
      '0':
        patterns:  #with the match above:
        - begin: "(?=.)"
          end: "$"
          patterns:
          - match: > # grab a hex integer
              (?x)
                (0[xX]) #ensure it starts with a 0x or 0X
                ([0-9a-fA-F](?:[0-9a-fA-F])*)$ #capture rest of hex digits
            captures:
              '1':
                name: constant.numeric.other.preffix.hex.cs
              '2':
                name: constant.numeric.hex.cs          
          - match: >   # grab a decimal integer
              (?x)
                (?=[0-9])(?!0[xX]) #ensure it starts with a digit, but not wit a 0x or 0X 
                ([0-9](?:[0-9])*)$ #capture rest of decimal digits
            captures:
              '1':
                name: constant.numeric.decimal.cs
          - match: (?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\.\d)+ # invalidate anything that did not match hex of decimal
            name: invalid.illegal.constant.numeric.cs
  char-literal:
    name: string.quoted.single.cs
    begin: \'
    beginCaptures:
      '0':
        name: punctuation.definition.char.begin.cs
    end: (\')|((?:[^\n])$) #end with a single quote or anything but newline
    endCaptures:
      '1':
        name: punctuation.definition.char.end.cs
      '2':
        name: invalid.illegal.newline.cs
    patterns:
    - match: ([0-9a-zA-Z]{2,})
      name: invalid.illegal.char.cs


#Punctuation
  punctuation-comma:
    match: \,
    name: punctuation.separator.comma.usp
  punctuation-semicolon:
    match: \;
    name: punctuation.terminator.statement.usp
  punctuation-accessor:
    match: \.
    name: punctuation.accessor.usp

#Comments
  comment:
    patterns:
      - name: comment.line.double-slash.usp
        begin: (^\s+)?(\/\/).*$
        while: ^(\s*)(\/\/).*$
        captures:
          "1":
            name: punctuation.whitespace.comment.leading.usp
          "2":
            name: punctuation.definition.comment.usp
      - name: comment.block.usp
        begin: \/\*
        end: \*\/
        captures:
          "0":
            name: punctuation.definition.comment.usp
      - contentName: comment.block.documentation.usp
        begin: (?i)(?:(help_begin)|(begin_prop_full_description)|(begin_prop_notes))
        beginCaptures:
          "1":
            name: keyword.preprocessor.helpbegin.usp
          "2":
            name: keyword.preprocessor.beginpropfulldescription.usp
          "3":
            name: keyword.preprocessor.beginpropnotes.usp
        end: (?i)(\#)(?:(help_end)|(end_prop_full_description)|(end_prop_notes))$
        endCaptures:
          "1":
            name: punctuation.separator.hash.usp
          "2":
            name: keyword.preprocessor.helpend.usp
          "3":
            name: keyword.preprocessor.endpropfulldescription.usp
          "4":
            name: keyword.preprocessor.endpropnotes.usp

