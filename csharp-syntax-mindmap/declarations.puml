@startmindmap
*: declarations
<code>
introduces an identifier into the language
and identifier syntax is
a-z, A-Z, 0-9, #, _, and $ but may not begin with 0-9
</code>
;

**:== meta.declaration.input.usp
input-declaration
----
|= keyword.declaration.input |= entity.name.variable.input | array |= punctuation.comma |= punctuation.terminator.input |
| DIGITAL_INPUT\n ANALOG_INPUT\n STRING_INPUT\n BUFFER_INPUT |  \n  name  | \n  [count , [min]] [size]  |= \n   , |=  \n     ; |;
**:== meta.declaration.output.usp
output-declaration
----
|= keyword.declaration.output |= entity.name.variable.output | array |= punctuation.comma |= punctuation.terminator.output |
| DIGITAL_OUTPUT\n ANALOG_OUTPUT\n STRING_OUTPUT\n BUFFER_OUTPUT |  \n  name | \n  [count , [min]] [size]  |= \n   , |=  \n     ; |;

**:== meta.declaration.parameter.usp
parameter-declaration
----
|= keyword.declaration.parameter |= entity.name.variable.parameter | array |= punctuation.comma |= punctuation.terminator.parameter |
| INTEGER_PARAMETER\n SIGNED_INTEGER_PARAMETER\n LONG_INTEGER_PARAMETER\n SIGNED_LONG_INTEGER_PARAMETER\n STRING_PARAMETER  |  \n  name | \n  [count] [size]  |= \n   ,|=  \n     ; |;

**:== meta.declaration.structure.usp
structure-declaration
----
|= keyword.declaration.structure |= entity.name.type.structure |= meta.structure.contents |= punctuation.terminator.structure |
| STRUCTURE |  name  |  {...} |=     ; |;

**:== meta.declaration.variable.usp
variable-declaration
----
|= keyword.modifier.variable.usp |= keyword.declaration.variable |= entity.name.variable | array |= punctuation.comma |= punctuation.terminator.variable |
| optional:\n VOLATILE\n NONVOLATILE\n ASCII\n UTF16\n INHERIT\n DELEGATEPROPERTY | INTEGER\n SIGNED_INTEGER\n LONG_INTEGER\n SIGNED_LONG_INTEGER\n STRING |  \n  name | \n  [count] [size]  |= \n   ,|=  \n     ; |

|= keyword.support.class |= entity.name.type | array |= punctuation.terminator.variable |
| CEVENT\n CMUTEX |  name  | [count]  |=     ; |

|= keyword.modifier.variable.usp |= entity.name.type |= entity.name.variable | array |= punctuation.terminator.variable |
| optional:\n VOLATILE\n NONVOLATILE\n | \n user defined object |  \n  name | \n  [count]  |=  \n     ; |;


**:== meta.declaration.function.usp
function-declaration
----
|= keyword.declaration.function |= entity.name.variable.function |= meta.delegate.parameters |= meta.function.contents |
| FUNCTION\n INTEGER_FUNCTION\n SIGNED_INTEGER_FUNCTION\n LONG_INTEGER_FUNCTION\n SIGNED_LONG_INTEGER_FUNCTION\n STRING_FUNCTION \n SIMPLSHARPSTRING_FUNCTION  |  \n  name | \n  parenthesized-parameter-list | \n  {..statements..}  |;

**:== meta.declaration.event.usp
event-declaration
----
|= keyword.modifier.event.usp |= keyword.declaration.event |= entity.name.variable.event |= punctuation.comma |= meta.event.contents |
| TRHEADSAFE | PUSH\n EVENT\n CHANGE\n RELEASE\n SOCKETCONNECT\n SOCKETDISCONNECT \n SOCKETRECEIVE \n SOCKETSTATUS  |  \n  name |= \n   ,| \n  {..statements..}  |
----
|= keyword.declaration.event |= entity.name.variable.event |= meta.event.parameters |= meta.event.contents |
| EVENTHANDLER  |  name | (..) | {..statements..}  |;

**:== meta.declaration.callback.usp
callback-declaration
----
|= keyword.declaration.callback |= keyword.declaration.function |= entity.name.variable.callback |= meta.callback.parameters |= meta.callback.contents |
| \n CALLBACK  | FUNCTION\n INTEGER_FUNCTION\n SIGNED_INTEGER_FUNCTION\n LONG_INTEGER_FUNCTION\n SIGNED_LONG_INTEGER_FUNCTION\n STRING_FUNCTION \n SIMPLSHARPSTRING_FUNCTION | \n  name | \n  parenthesized-parameter-list  | \n  {..statements..}  |;


** SIMPL#

***:== meta.declaration.namespace
namespace-declaration
----
|= keyword.declaration.namespace |= entity.name.type.namespace |= meta.namespace.contents  |
| NAMESPACE |  name  |  {...} |;

***:== meta.declaration.class
class-declaration
----
|= keyword.modifier.class |= keyword.declaration.class |= entity.name.type.class |= meta.class.contents  |
| Optional:\n STATIC | CLASS |  name  |  {...} |;


***:== meta.declaration.class.delegate
class-delegate-declaration
----
|= keyword.modifier.delegate |= keyword.declaration.delegate |= keyword.declaration.function |= entity.name.type.delegate |= meta.delegate.parameters  |= punctuation.terminator.delegate |
| Optional:\n STATIC | DELEGATE | FUNCTION\n INTEGER_FUNCTION\n SIGNED_INTEGER_FUNCTION\n LONG_INTEGER_FUNCTION\n SIGNED_LONG_INTEGER_FUNCTION\n STRING_FUNCTION \n SIMPLSHARPSTRING_FUNCTION |  name  |  parenthesized-parameter-list |=     ; |

|= keyword.modifier.delegate |= keyword.declaration.delegate |= entity.name.type |= entity.name.variable.function |= meta.delegate.parameters |= punctuation.terminator.delegate |
| Optional:\n STATIC | DELEGATE | user class  |  name |  parenthesized-parameter-list |=   ;  |;


***:== meta.declaration.class.eventhandler
class-eventhandler-declaration
----
|= keyword.declaration.eventhandler |= entity.name.eventhandler |= meta.delegate.parameters  |= punctuation.terminator.delegate |
| EVENTHANDLER |  name  |  parenthesized-parameter-list |=     ; |;

***:== meta.declaration.class.function.usp
function-declaration
----
|= keyword.declaration.function |= entity.name.variable.function |= meta.delegate.parameters |= punctuation.terminator.function |
| FUNCTION\n INTEGER_FUNCTION\n SIGNED_INTEGER_FUNCTION\n LONG_INTEGER_FUNCTION\n SIGNED_LONG_INTEGER_FUNCTION\n STRING_FUNCTION \n SIMPLSHARPSTRING_FUNCTION  |  \n  name | \n  parenthesized-parameter-list |= \n    ;  |;


**: parenthesized-parameter-list
----
|= keyword.modifier.parameter |= keyword.declaration.variable |= entity.name.variable | array |
| optional:\n ByVal\n ByRef\n ReadOnlyRef | INTEGER\n SIGNED_INTEGER\n LONG_INTEGER\n SIGNED_LONG_INTEGER\n EVENTARGS |  \n  name | \n  [] []  |

|= keyword.modifier.parameter |= entity.name.type |= entity.name.variable | array |
| optional:\n ByVal\n ByRef\n ReadOnlyRef | \n used defined object |  \n  name | \n  []  |;

@endmindmap