@startjson Type
{
    "DocumentToken":
    {
        "name": "string",
        "type": "TokenType",
        "nameRange": "Range",
        "dataType": "string",
        "parameters?": "DocumentToken[]",
        "parameterRange?": "Range",
        "blockRange?": "Range",
        "internalDelegates?": "DocumentToken[]",
        "internalEvents?": "DocumentToken[]",
        "internalFunctions?": "DocumentToken[]",
        "internalVariables?": "DocumentToken[]",
        "internalProperties?": "DocumentToken[]",
        "internalDelegateProperties?": "DocumentToken[]"
    }
}
@endjson

@startjson StructureExample
{
    "internalStructures":[
    {
        "name": "<back:lightgreen>myStructure1",
        "type": "struct",
        "nameRange": "[6:10 -> 6:22)",
        "dataType": "<back:lightgreen>myStructure1",
        "blockRange?": "[6:22 -> 9:1)",
        "internalVariables?":  [
        {
            "name": "test1",
            "type": "variable",
            "dataType": "Integer",
            "nameRange": "[7:9 -> 7:14)"
        }
        ,
        {
            "name": "test2",
            "type": "variable",
            "dataType": "Long_Integer",
            "nameRange": "[8:14 -> 8:19)"
        }
        ]
    }
    ,
    {
        "name": "<back:orange>myStructure2",
        "type": "struct",
        "nameRange": "[11:10->11:22)",
        "dataType": "<back:orange>myStructure2",
        "blockRange?": "[11:22 -> 15:1)",
        "internalVariables?":  [
        {
            "name": "test3",
            "type": "variable",
            "dataType": "Integer",
            "nameRange": "[12:9 -> 12:14)"
        }
        ,
        {
            "name": "test4",
            "type": "variable",
            "dataType": "Long_Integer",
            "nameRange": "[13:14 -> 13:19)"
        }
        ,
        {
            "name": "test5",
            "type": "variable",
            "dataType": "<back:lightgreen>myStructure1",
            "nameRange": "[14:14 -> 14:19)"
        }
        ]
    }
    ,
    {
        "name": "<back:cyan>myStructure3",
        "type": "struct",
        "nameRange": "[17:10->17:22)",
        "dataType": "<back:cyan>myStructure3",
        "blockRange?": "[17:22 -> 21:1)",
        "internalVariables?":  [
        {
            "name": "test6",
            "type": "variable",
            "dataType": "Integer",
            "nameRange": "[18:9 -> 18:14)"
        }
        ,
        {
            "name": "test7",
            "type": "variable",
            "dataType": "Long_Integer",
            "nameRange": "[19:14 -> 19:19)"
        }
        ,
        {
            "name": "test8",
            "type": "variable",
            "dataType": "<back:orange>myStructure2",
            "nameRange": "[20:14 -> 20:19)"
        }
        ]
    }
    ]
}
@endjson

@startuml
start
floating note left
Token Traversal for local structures
for mystructure3.test8.test5.test1
autocompletes should be:
mystructure3. -> test6, test7, test8
mystructure3.test8 -> test3, test4, test5
mystructure3.test8.test5 -> test1, test2

end note
:Tokens[] = ;
:currentToken = Tokens.Shift();
:currentObject = getDocumentMembersByName(currentToken);
if (currentObject.Type) then (TokenType.Struct)
    :currentToken = Token.Shift();
    while (currentVariable) is (not null);
        :property = currentObject.internalVariables.Find(o->o.name == currentToken);
        :currentObject = getDocumentMembersByName(property.DataType);
        :currentToken = Token.Shift();
    endwhile
endif
:getCompletionItemsFromDocument(currentObject);

end


@enduml

@startuml
start
floating note left
Token Traversal for external classes
for myclass.test8.test5.test1
autocompletes should be:
myclass. -> test6, test7, test8
myclass.test8 -> test3, test4, test5
myclass.test8.test5 -> test1, test2

end note
:Tokens[] = ;
:currentToken = Tokens.Shift();
:currentObject = getDocumentMembersByName(currentToken);
if (currentObject.Type) then (TokenType.Variable)
    :currentObject = getDocumentMembersByType(currentObject.DataType);
    if (currentObject.Type) then (TokenType.Class)
        :currentToken = Token.Shift();
        while (currentVariable) is (not null);
            :property = currentObject.internalVariables.Find(o->o.name == currentToken);
            :currentObject = getDocumentMembersByName(property.DataType);
            :currentToken = Token.Shift();
        endwhile
    endif
endif
:getCompletionItemsFromDocument(currentObject);

end


@enduml